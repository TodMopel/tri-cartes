{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js\",\n  _s = $RefreshSig$();\n// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport CardDropZone from './CardDropZone';\nimport Category from './Category';\nimport jobListData from './../data/jobList.json';\nimport CardDiscard from './CardDiscard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    selectedCardIndex: null,\n    categoryList: []\n  });\n  const isCardPileDisabled = gameData.jobList.length === 0;\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  useEffect(() => {\n    if (gameData.jobList.length <= 0) {\n      fetchJobList();\n    }\n  }, []);\n  const isColliding = (element1, element2) => {\n    const rect1 = element1.getBoundingClientRect();\n    const rect2 = element2.getBoundingClientRect();\n    return !(rect1.right < rect2.left || rect1.left > rect2.right || rect1.bottom < rect2.top || rect1.top > rect2.bottom);\n  };\n  const fetchJobList = () => {\n    const jobListString = JSON.stringify(jobListData);\n    const jobListObject = JSON.parse(jobListString);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: Object.entries(jobListObject).map(([text, description]) => ({\n        text,\n        description\n      }))\n    }));\n    console.log(\"fetchJobList\");\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 150\n      },\n      text: selectedJob.text,\n      description: selectedJob.description\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: 10,\n        y: 20\n      },\n      text: \"categorie \" + (categoryList.length + 1)\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleCardDragStart = index => {\n    console.log(`Card picked! Card : ${gameData.cardList[index]}`);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      selectedCardIndex: index\n    }));\n  };\n  const handleCardDrop = () => {\n    console.log(`Card dropped! Card : ${gameData.cardList[gameData.selectedCardIndex]}`);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      selectedCardIndex: null\n    }));\n  };\n  const isCardCollidingWithDropZone = () => {\n    const selectedCard = gameData.cardList[gameData.selectedCardIndex];\n    const cardElement = document.querySelector(`#card-${gameData.selectedCardIndex}`);\n    const dropZones = document.querySelectorAll('.card-drop-zone');\n    for (const dropZone of dropZones) {\n      if (isColliding(cardElement, dropZone)) {\n        return dropZone.getAttribute('data-drop-zone-id');\n      }\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [!isCardPileDisabled && /*#__PURE__*/_jsxDEV(CardPile, {\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCategory,\n      children: \"cr\\xE9er une cat\\xE9gorie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      text: category.text,\n      position: category.position\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      onDragStart: () => handleCardDragStart(index),\n      onDragEnd: handleCardDrop,\n      isCollidingWithDropZone: isCardCollidingWithDropZone\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"jMTEplSXqo2ke97UsH15BMBiy3g=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardPile","CardDropZone","Category","jobListData","CardDiscard","jsxDEV","_jsxDEV","GamePage","_s","gameData","setGameData","jobList","cardList","selectedCardIndex","categoryList","isCardPileDisabled","length","discardPosition","x","y","fetchJobList","isColliding","element1","element2","rect1","getBoundingClientRect","rect2","right","left","bottom","top","jobListString","JSON","stringify","jobListObject","parse","prevGameData","Object","entries","map","text","description","console","log","handleAddCard","pilePosition","randomIndex","Math","floor","random","selectedJob","cardWidth","newCard","position","updatedJobList","filter","_","index","handleAddCategory","newCategory","handleCardDragStart","handleCardDrop","isCardCollidingWithDropZone","selectedCard","cardElement","document","querySelector","dropZones","querySelectorAll","dropZone","getAttribute","children","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","onClick","category","card","onDragStart","onDragEnd","isCollidingWithDropZone","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js"],"sourcesContent":["// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport CardDropZone from './CardDropZone';\nimport Category from './Category';\nimport jobListData from './../data/jobList.json';\nimport CardDiscard from './CardDiscard';\n\nconst GamePage = () => {\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        selectedCardIndex: null,\n        categoryList: [],\n    });\n    const isCardPileDisabled = gameData.jobList.length === 0;\n    const discardPosition = ({ x: 110, y: 80 });\n\n    useEffect(() => {\n        if (gameData.jobList.length <= 0) {\n            fetchJobList();\n        }\n    }, []);\n\n    const isColliding = (element1, element2) => {\n        const rect1 = element1.getBoundingClientRect();\n        const rect2 = element2.getBoundingClientRect();\n\n        return !(\n            rect1.right < rect2.left ||\n            rect1.left > rect2.right ||\n            rect1.bottom < rect2.top ||\n            rect1.top > rect2.bottom\n        );\n    };\n\n    const fetchJobList = () => {\n        const jobListString = JSON.stringify(jobListData);\n        const jobListObject = JSON.parse(jobListString);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n        }));\n        console.log(\"fetchJobList\");\n    };\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 150 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: 10, y: 20 },\n            text: \"categorie \" + (categoryList.length + 1),\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleCardDragStart = (index) => {\n        console.log(`Card picked! Card : ${gameData.cardList[index]}`);\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            selectedCardIndex: index,\n        }));\n    };\n\n    const handleCardDrop = () => {\n        console.log(`Card dropped! Card : ${gameData.cardList[gameData.selectedCardIndex]}`);\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            selectedCardIndex: null,\n        }));\n    };\n\n    const isCardCollidingWithDropZone = () => {\n        const selectedCard = gameData.cardList[gameData.selectedCardIndex];\n        const cardElement = document.querySelector(`#card-${gameData.selectedCardIndex}`);\n        const dropZones = document.querySelectorAll('.card-drop-zone');\n\n        for (const dropZone of dropZones) {\n            if (isColliding(cardElement, dropZone)) {\n                return dropZone.getAttribute('data-drop-zone-id');\n            }\n        }\n\n        return null;\n    };\n\n    return (\n        <div>\n            {!isCardPileDisabled && (\n                <CardPile addCard={handleAddCard} counter={gameData.jobList.length} />\n            )}\n            <CardDiscard position={discardPosition}/>\n            <button onClick={handleAddCategory}>créer une catégorie</button>\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    text={category.text}\n                    position={category.position}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                <Card\n                    key={index}\n                    text={card.text}\n                    position={card.position}\n\n                    onDragStart={() => handleCardDragStart(index)}\n                    onDragEnd={handleCardDrop}\n\n                    isCollidingWithDropZone={isCardCollidingWithDropZone}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default GamePage;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,wBAAwB;AAChD,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IACrCc,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE,EAAE;IACZC,iBAAiB,EAAE,IAAI;IACvBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACF,MAAMC,kBAAkB,GAAGN,QAAQ,CAACE,OAAO,CAACK,MAAM,KAAK,CAAC;EACxD,MAAMC,eAAe,GAAI;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAG,CAAE;EAE3CrB,SAAS,CAAC,MAAM;IACZ,IAAIW,QAAQ,CAACE,OAAO,CAACK,MAAM,IAAI,CAAC,EAAE;MAC9BI,YAAY,CAAC,CAAC;IAClB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IACxC,MAAMC,KAAK,GAAGF,QAAQ,CAACG,qBAAqB,CAAC,CAAC;IAC9C,MAAMC,KAAK,GAAGH,QAAQ,CAACE,qBAAqB,CAAC,CAAC;IAE9C,OAAO,EACHD,KAAK,CAACG,KAAK,GAAGD,KAAK,CAACE,IAAI,IACxBJ,KAAK,CAACI,IAAI,GAAGF,KAAK,CAACC,KAAK,IACxBH,KAAK,CAACK,MAAM,GAAGH,KAAK,CAACI,GAAG,IACxBN,KAAK,CAACM,GAAG,GAAGJ,KAAK,CAACG,MAAM,CAC3B;EACL,CAAC;EAED,MAAMT,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMW,aAAa,GAAGC,IAAI,CAACC,SAAS,CAAC9B,WAAW,CAAC;IACjD,MAAM+B,aAAa,GAAGF,IAAI,CAACG,KAAK,CAACJ,aAAa,CAAC;IAE/CrB,WAAW,CAAE0B,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfzB,OAAO,EAAE0B,MAAM,CAACC,OAAO,CAACJ,aAAa,CAAC,CAACK,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,WAAW,CAAC,MAAM;QAAED,IAAI;QAAEC;MAAY,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;IACHC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAC/B,CAAC;EAED,MAAMC,aAAa,GAAIC,YAAY,IAAK;IACpC,MAAM;MAAElC;IAAQ,CAAC,GAAGF,QAAQ;IAE5B,IAAIE,OAAO,CAACK,MAAM,KAAK,CAAC,EAAE;IAE1B,MAAM8B,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGtC,OAAO,CAACK,MAAM,CAAC;IAC9D,MAAMkC,WAAW,GAAGvC,OAAO,CAACmC,WAAW,CAAC;IAExC,MAAMK,SAAS,GAAG,GAAG;IACrB,MAAMC,OAAO,GAAG;MACZC,QAAQ,EAAE;QAAEnC,CAAC,EAAE2B,YAAY,CAAC3B,CAAC,GAAGiC,SAAS,GAAG,CAAC;QAAEhC,CAAC,EAAE0B,YAAY,CAAC1B,CAAC,GAAG;MAAI,CAAC;MACxEqB,IAAI,EAAEU,WAAW,CAACV,IAAI;MACtBC,WAAW,EAAES,WAAW,CAACT;IAC7B,CAAC;IAED,MAAMa,cAAc,GAAG3C,OAAO,CAAC4C,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKX,WAAW,CAAC;IAE1EpC,WAAW,CAAE0B,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfxB,QAAQ,EAAE,CAAC,GAAGwB,YAAY,CAACxB,QAAQ,EAAEwC,OAAO,CAAC;MAC7CzC,OAAO,EAAE2C;IACb,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMI,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAM;MAAE5C;IAAa,CAAC,GAAGL,QAAQ;IAEjC,MAAMkD,WAAW,GAAG;MAChBN,QAAQ,EAAE;QAAEnC,CAAC,EAAE,EAAE;QAAEC,CAAC,EAAE;MAAG,CAAC;MAC1BqB,IAAI,EAAE,YAAY,IAAI1B,YAAY,CAACE,MAAM,GAAG,CAAC;IACjD,CAAC;IAEDN,WAAW,CAAE0B,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACftB,YAAY,EAAE,CAAC,GAAGsB,YAAY,CAACtB,YAAY,EAAE6C,WAAW;IAC5D,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMC,mBAAmB,GAAIH,KAAK,IAAK;IACnCf,OAAO,CAACC,GAAG,CAAE,uBAAsBlC,QAAQ,CAACG,QAAQ,CAAC6C,KAAK,CAAE,EAAC,CAAC;IAC9D/C,WAAW,CAAE0B,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfvB,iBAAiB,EAAE4C;IACvB,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMI,cAAc,GAAGA,CAAA,KAAM;IACzBnB,OAAO,CAACC,GAAG,CAAE,wBAAuBlC,QAAQ,CAACG,QAAQ,CAACH,QAAQ,CAACI,iBAAiB,CAAE,EAAC,CAAC;IACpFH,WAAW,CAAE0B,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfvB,iBAAiB,EAAE;IACvB,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMiD,2BAA2B,GAAGA,CAAA,KAAM;IACtC,MAAMC,YAAY,GAAGtD,QAAQ,CAACG,QAAQ,CAACH,QAAQ,CAACI,iBAAiB,CAAC;IAClE,MAAMmD,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAE,SAAQzD,QAAQ,CAACI,iBAAkB,EAAC,CAAC;IACjF,MAAMsD,SAAS,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,iBAAiB,CAAC;IAE9D,KAAK,MAAMC,QAAQ,IAAIF,SAAS,EAAE;MAC9B,IAAI9C,WAAW,CAAC2C,WAAW,EAAEK,QAAQ,CAAC,EAAE;QACpC,OAAOA,QAAQ,CAACC,YAAY,CAAC,mBAAmB,CAAC;MACrD;IACJ;IAEA,OAAO,IAAI;EACf,CAAC;EAED,oBACIhE,OAAA;IAAAiE,QAAA,GACK,CAACxD,kBAAkB,iBAChBT,OAAA,CAACN,QAAQ;MAACwE,OAAO,EAAE5B,aAAc;MAAC6B,OAAO,EAAEhE,QAAQ,CAACE,OAAO,CAACK;IAAO;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACxE,eACDvE,OAAA,CAACF,WAAW;MAACiD,QAAQ,EAAEpC;IAAgB;MAAAyD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACzCvE,OAAA;MAAQwE,OAAO,EAAEpB,iBAAkB;MAAAa,QAAA,EAAC;IAAmB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/DpE,QAAQ,CAACK,YAAY,CAACyB,GAAG,CAAC,CAACwC,QAAQ,EAAEtB,KAAK,kBACvCnD,OAAA,CAACJ,QAAQ;MAELsC,IAAI,EAAEuC,QAAQ,CAACvC,IAAK;MACpBa,QAAQ,EAAE0B,QAAQ,CAAC1B;IAAS,GAFvBI,KAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGb,CACJ,CAAC,EACDpE,QAAQ,CAACG,QAAQ,CAAC2B,GAAG,CAAC,CAACyC,IAAI,EAAEvB,KAAK,kBAC/BnD,OAAA,CAACP,IAAI;MAEDyC,IAAI,EAAEwC,IAAI,CAACxC,IAAK;MAChBa,QAAQ,EAAE2B,IAAI,CAAC3B,QAAS;MAExB4B,WAAW,EAAEA,CAAA,KAAMrB,mBAAmB,CAACH,KAAK,CAAE;MAC9CyB,SAAS,EAAErB,cAAe;MAE1BsB,uBAAuB,EAAErB;IAA4B,GAPhDL,KAAK;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQb,CACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACrE,EAAA,CAvIID,QAAQ;AAAA6E,EAAA,GAAR7E,QAAQ;AAyId,eAAeA,QAAQ;AAAC,IAAA6E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}