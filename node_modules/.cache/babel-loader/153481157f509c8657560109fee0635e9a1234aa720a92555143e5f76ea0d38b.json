{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/Droppable.js\",\n  _s = $RefreshSig$();\n// Droppable.js\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Droppable = ({\n  children,\n  onDragEnter,\n  onDragLeave,\n  onDrop\n}) => {\n  _s();\n  const [isHovered, setIsHovered] = useState(false);\n  const handleDragEnter = e => {\n    e.preventDefault();\n    if (isElementDragged(e)) {\n      setIsHovered(true);\n      if (onDragEnter) {\n        onDragEnter();\n      }\n    }\n  };\n  const handleDragLeave = () => {\n    setIsHovered(false);\n    if (onDragLeave) {\n      onDragLeave();\n      setIsHovered(false);\n    }\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    setIsHovered(false);\n    if (onDrop && isElementDragged(e)) {\n      onDrop();\n    }\n  };\n  const isElementDragged = e => {\n    // Tu peux implémenter ici ta propre logique pour déterminer si un élément est en cours de drag\n    // Par exemple, tu pourrais vérifier si le type de données que tu as défini pour le drag est présent dans l'événement\n    return e.dataTransfer.types.includes('myCustomDragType');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Droppable, \"FPQn8a98tPjpohC7NUYORQR8GJE=\");\n_c = Droppable;\nexport default Droppable;\nvar _c;\n$RefreshReg$(_c, \"Droppable\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Droppable","children","onDragEnter","onDragLeave","onDrop","_s","isHovered","setIsHovered","handleDragEnter","e","preventDefault","isElementDragged","handleDragLeave","handleDrop","dataTransfer","types","includes","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/Droppable.js"],"sourcesContent":["// Droppable.js\n\nimport React, { useState } from 'react';\n\nconst Droppable = ({ children, onDragEnter, onDragLeave, onDrop }) => {\n    const [isHovered, setIsHovered] = useState(false);\n\n    const handleDragEnter = (e) => {\n        e.preventDefault();\n        if (isElementDragged(e)) {\n            setIsHovered(true);\n            if (onDragEnter) {\n                onDragEnter();\n            }\n        }\n    };\n\n    const handleDragLeave = () => {\n        setIsHovered(false);\n        if (onDragLeave) {\n            onDragLeave();\n            setIsHovered(false);\n        }\n    };\n\n    const handleDrop = (e) => {\n        e.preventDefault();\n        setIsHovered(false);\n        if (onDrop && isElementDragged(e)) {\n            onDrop();\n        }\n    };\n\n    const isElementDragged = (e) => {\n        // Tu peux implémenter ici ta propre logique pour déterminer si un élément est en cours de drag\n        // Par exemple, tu pourrais vérifier si le type de données que tu as défini pour le drag est présent dans l'événement\n        return e.dataTransfer.types.includes('myCustomDragType');\n    };\n\n    return (\n        <div\n        >\n            {children}\n        </div>\n    );\n};\n\nexport default Droppable;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,WAAW;EAAEC,WAAW;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAClE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMW,eAAe,GAAIC,CAAC,IAAK;IAC3BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIC,gBAAgB,CAACF,CAAC,CAAC,EAAE;MACrBF,YAAY,CAAC,IAAI,CAAC;MAClB,IAAIL,WAAW,EAAE;QACbA,WAAW,CAAC,CAAC;MACjB;IACJ;EACJ,CAAC;EAED,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC1BL,YAAY,CAAC,KAAK,CAAC;IACnB,IAAIJ,WAAW,EAAE;MACbA,WAAW,CAAC,CAAC;MACbI,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,MAAMM,UAAU,GAAIJ,CAAC,IAAK;IACtBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBH,YAAY,CAAC,KAAK,CAAC;IACnB,IAAIH,MAAM,IAAIO,gBAAgB,CAACF,CAAC,CAAC,EAAE;MAC/BL,MAAM,CAAC,CAAC;IACZ;EACJ,CAAC;EAED,MAAMO,gBAAgB,GAAIF,CAAC,IAAK;IAC5B;IACA;IACA,OAAOA,CAAC,CAACK,YAAY,CAACC,KAAK,CAACC,QAAQ,CAAC,kBAAkB,CAAC;EAC5D,CAAC;EAED,oBACIjB,OAAA;IAAAE,QAAA,EAEKA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAACf,EAAA,CAzCIL,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}