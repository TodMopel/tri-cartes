{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import Card from'./../components/Card';import CardPile from'./../components/CardPile';import Category from'./../components/Category';import CardDiscard from'./../components/CardDiscard';import InfoPanel from'./../components/InfoPanel';import'./../App.css';import config from'./../data/config';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const GamePage=_ref=>{let{jobListData,onResultSubmit}=_ref;const[gameData,setGameData]=useState({jobList:[],cardList:[],discardedCardsList:[],categoryList:[],infoPanelCard:null,selectedCardIndex:null,lastSelectedCardIndex:null,cardMoving:false});const[mouseCoordinates,setMouseCoordinates]=useState({x:0,y:0});const[zIndexOrder,setZIndexOrder]=useState(1);const pilePosition={x:window.innerWidth/2-55,y:window.innerHeight/2-40};const discardPosition={x:110,y:80};const infoPanelPosition={x:110,y:window.innerHeight-280};const newCategoryPosition={x:window.innerWidth/2-config.category.size.x/2,y:80};useEffect(()=>{setGameData(prevGameData=>({...prevGameData,jobList:jobListData||[]}));},[jobListData]);//useEffect(() => {\n//    if (gameData.jobList.length <= 0) {\n//        fetchJobList();\n//    }\n//}, []);\n//const fetchJobList = () => {\n//    const jobListString = JSON.stringify(jobListData);\n//    const jobListObject = JSON.parse(jobListString);\n//    setGameData((prevGameData) => ({\n//        ...prevGameData,\n//        jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n//    }));\n//};\nconst handleCardDropOnDroppable=item=>{const droppedCard=gameData.cardList[gameData.lastSelectedCardIndex];//console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\ndroppedCard.isActive=false;if(item===\"Discard\"){setGameData(prevGameData=>({...prevGameData,discardedCardsList:[...prevGameData.discardedCardsList,droppedCard]}));}else if(item===\"InfoPanel\"){setGameData(prevGameData=>({...prevGameData,infoPanelCard:droppedCard}));}else{// c'est une categorie\nconst updatedCategoryList=gameData.categoryList.map(category=>{if(category.text===item){const updatedcategoryCardList=category.categoryCardList?[...category.categoryCardList,droppedCard]:[droppedCard];return{...category,categoryCardList:updatedcategoryCardList};}return category;});setGameData(prevGameData=>({...prevGameData,categoryList:updatedCategoryList}));}};const handleAddCard=pilePosition=>{const{jobList}=gameData;if(jobList.length===0)return;const randomIndex=Math.floor(Math.random()*jobList.length);const selectedJob=jobList[randomIndex];const cardWidth=config.card.size.x;const newCard={position:{x:pilePosition.x-cardWidth/2,y:pilePosition.y-80},text:selectedJob.text,description:selectedJob.description,isActive:true,zIndex:zIndexOrder};const updatedJobList=jobList.filter((_,index)=>index!==randomIndex);setGameData(prevGameData=>({...prevGameData,cardList:[...prevGameData.cardList,newCard],jobList:updatedJobList}));};const handleRestoreDiscardedCard=discardPosition=>{const{discardedCardsList}=gameData;if(discardedCardsList.length===0)return;const cardWidth=config.card.size.x;const newCard={position:{x:discardPosition.x-cardWidth/2,y:discardPosition.y-80},text:discardedCardsList[discardedCardsList.length-1].text,description:discardedCardsList[discardedCardsList.length-1].description,isActive:true,zIndex:zIndexOrder};const updatedDiscardedCardsList=discardedCardsList.filter((_,index)=>index!==discardedCardsList.length-1);setGameData(prevGameData=>({...prevGameData,cardList:[...prevGameData.cardList,newCard],discardedCardsList:updatedDiscardedCardsList}));};const handleRestoreCategorizedCard=(position,categoryIndex,cardIndex)=>{const updatedCategoryList=[...gameData.categoryList];const updatedCardList=[...gameData.cardList];const selectedCategory=updatedCategoryList[categoryIndex];const restoredCard=selectedCategory.categoryCardList[cardIndex];selectedCategory.categoryCardList.splice(cardIndex,1);const cardWidth=config.card.size.x;const newCard={position:{x:position.x-cardWidth/2,y:position.y-80},text:restoredCard.text,description:restoredCard.description,isActive:true,zIndex:zIndexOrder};updatedCardList.push(newCard);setGameData(prevGameData=>({...prevGameData,categoryList:updatedCategoryList,cardList:updatedCardList}));};const handleRestoreInfoPanelCard=(position,card)=>{const updatedCardList=[...gameData.cardList];const cardWidth=config.card.size.x;const newCard={position:{x:position.x,y:position.y},text:card.text,description:card.description,isActive:true,zIndex:zIndexOrder};updatedCardList.push(newCard);setGameData(prevGameData=>({...prevGameData,cardList:updatedCardList,infoPanelCard:null}));};const handleAddCategory=()=>{const{categoryList}=gameData;const newCategory={position:{x:newCategoryPosition.x,y:newCategoryPosition.y},text:config.category.baseTitle+\" \"+(categoryList.length+1),categoryCardList:[],zIndex:zIndexOrder};setGameData(prevGameData=>({...prevGameData,categoryList:[...prevGameData.categoryList,newCategory]}));};const handleDragStart=(cardIndex,categoryIndex)=>{if(cardIndex!=null){setZIndexOrder(prevZIndexOrder=>prevZIndexOrder+1);setGameData(prevGameData=>{const updatedCardList=[...prevGameData.cardList];updatedCardList[cardIndex]={...updatedCardList[cardIndex],zIndex:zIndexOrder};return{...prevGameData,selectedCardIndex:cardIndex,cardMoving:true,cardList:updatedCardList};});}if(categoryIndex!=null){setZIndexOrder(prevZIndexOrder=>prevZIndexOrder+1);setGameData(prevGameData=>{const updatedCategoryList=[...prevGameData.categoryList];updatedCategoryList[categoryIndex]={...updatedCategoryList[categoryIndex],zIndex:zIndexOrder};return{...prevGameData,categoryList:updatedCategoryList};});}};const handleCardDragEnd=()=>{setGameData(prevGameData=>({...prevGameData,lastSelectedCardIndex:prevGameData.selectedCardIndex,selectedCardIndex:null,cardMoving:false}));};const handleCardMove=()=>{};const handleMouseMove=e=>{const mouseX=e.clientX;const mouseY=e.clientY;setMouseCoordinates({x:mouseX,y:mouseY});};const handleTouchMove=e=>{const touchX=e.touches[0].clientX;const touchY=e.touches[0].clientY;setMouseCoordinates({x:touchX,y:touchY});};const updateCategoryText=(categoryIndex,newText)=>{setGameData(prevGameData=>{const updatedCategoryList=[...prevGameData.categoryList];updatedCategoryList[categoryIndex]={...updatedCategoryList[categoryIndex],text:newText};return{...prevGameData,categoryList:updatedCategoryList};});};const generateResultTable=()=>{const resultTable=gameData.categoryList.map(category=>{return{categoryName:category.text,jobs:category.categoryCardList.map(card=>card.text)};});onResultSubmit(resultTable);};return/*#__PURE__*/_jsxs(\"div\",{className:\"unselectable game-page background-grid\",onMouseMove:handleMouseMove,onTouchMove:handleTouchMove,children:[gameData.jobList.length>-1&&/*#__PURE__*/_jsx(CardPile,{position:pilePosition,elementRef:'CardPile',onDragStart:handleDragStart,addCard:handleAddCard,counter:gameData.jobList.length}),/*#__PURE__*/_jsx(CardDiscard,{position:discardPosition,onDragStart:handleDragStart,onCancel:handleRestoreDiscardedCard,discardedCardsList:gameData.discardedCardsList,cardMoving:gameData.cardMoving,mousePosition:mouseCoordinates,onCardDropInsideDropZone:handleCardDropOnDroppable}),/*#__PURE__*/_jsx(InfoPanel,{position:infoPanelPosition,onDragStart:handleDragStart,cardMoving:gameData.cardMoving,mousePosition:mouseCoordinates,onCardDropInsideDropZone:handleCardDropOnDroppable,droppedCard:gameData.infoPanelCard,onCardRestored:handleRestoreInfoPanelCard}),gameData.categoryList.map((category,index)=>/*#__PURE__*/_jsx(Category,{categoryIndex:index,text:category.text,updateCategoryText:newText=>updateCategoryText(index,newText),position:category.position,categoryCardList:category.categoryCardList,zIndexOrder:category.zIndex,onDragStart:()=>handleDragStart(null,index),cardMoving:gameData.cardMoving,mousePosition:mouseCoordinates,onCardDropInsideDropZone:handleCardDropOnDroppable,onCardRestored:handleRestoreCategorizedCard},index)),gameData.cardList.map((card,index)=>card.isActive&&/*#__PURE__*/_jsx(Card,{text:card.text,position:card.position,zIndexOrder:card.zIndex,onDragStart:()=>handleDragStart(index,null),onDragEnd:handleCardDragEnd,onDragMove:handleCardMove},index)),/*#__PURE__*/_jsx(\"div\",{className:\"ui-button-container ui-add-category-button\",children:/*#__PURE__*/_jsx(\"div\",{className:\"button button-normal\",onClick:handleAddCategory,children:config.category.createButtonText})}),gameData.jobList.length===0&&gameData.cardList.every(card=>!card.isActive)&&/*#__PURE__*/_jsx(\"div\",{className:\"ui-button-container ui-end-game-button\",children:/*#__PURE__*/_jsx(Link,{onClick:generateResultTable,to:\"/tri-cartes/result\",className:\"button button-normal\",children:config.result.endGameButton})})]});};export default GamePage;","map":{"version":3,"names":["React","useState","useEffect","Link","Card","CardPile","Category","CardDiscard","InfoPanel","config","jsx","_jsx","jsxs","_jsxs","GamePage","_ref","jobListData","onResultSubmit","gameData","setGameData","jobList","cardList","discardedCardsList","categoryList","infoPanelCard","selectedCardIndex","lastSelectedCardIndex","cardMoving","mouseCoordinates","setMouseCoordinates","x","y","zIndexOrder","setZIndexOrder","pilePosition","window","innerWidth","innerHeight","discardPosition","infoPanelPosition","newCategoryPosition","category","size","prevGameData","handleCardDropOnDroppable","item","droppedCard","isActive","updatedCategoryList","map","text","updatedcategoryCardList","categoryCardList","handleAddCard","length","randomIndex","Math","floor","random","selectedJob","cardWidth","card","newCard","position","description","zIndex","updatedJobList","filter","_","index","handleRestoreDiscardedCard","updatedDiscardedCardsList","handleRestoreCategorizedCard","categoryIndex","cardIndex","updatedCardList","selectedCategory","restoredCard","splice","push","handleRestoreInfoPanelCard","handleAddCategory","newCategory","baseTitle","handleDragStart","prevZIndexOrder","handleCardDragEnd","handleCardMove","handleMouseMove","e","mouseX","clientX","mouseY","clientY","handleTouchMove","touchX","touches","touchY","updateCategoryText","newText","generateResultTable","resultTable","categoryName","jobs","className","onMouseMove","onTouchMove","children","elementRef","onDragStart","addCard","counter","onCancel","mousePosition","onCardDropInsideDropZone","onCardRestored","onDragEnd","onDragMove","onClick","createButtonText","every","to","result","endGameButton"],"sources":["/Users/todmopel/TheHangar/test deploy/tri-cartes/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\n\nimport config from './../data/config';\n\nconst GamePage = ({ jobListData, onResultSubmit }) => {\n\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        discardedCardsList: [],\n        categoryList: [],\n        infoPanelCard: null,\n        selectedCardIndex: null,\n        lastSelectedCardIndex: null,\n        cardMoving: false,\n    });\n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n    const [zIndexOrder, setZIndexOrder] = useState(1);\n\n    const pilePosition = ({ x: window.innerWidth / 2 - 55, y: window.innerHeight / 2 - 40 });\n    const discardPosition = ({ x: 110, y: 80 });\n    const infoPanelPosition = ({ x: 110, y: window.innerHeight - 280 });\n    const newCategoryPosition = ({ x: window.innerWidth / 2 - config.category.size.x / 2, y: 80 });\n\n    useEffect(() => {\n        setGameData(prevGameData => ({\n            ...prevGameData,\n            jobList: jobListData || [],\n        }));\n    }, [jobListData]);\n\n    //useEffect(() => {\n    //    if (gameData.jobList.length <= 0) {\n    //        fetchJobList();\n    //    }\n    //}, []);\n\n    //const fetchJobList = () => {\n    //    const jobListString = JSON.stringify(jobListData);\n    //    const jobListObject = JSON.parse(jobListString);\n\n    //    setGameData((prevGameData) => ({\n    //        ...prevGameData,\n    //        jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n    //    }));\n    //};\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"InfoPanel\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                infoPanelCard: droppedCard,\n            }));\n        } else { // c'est une categorie\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n        }\n    }\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 80 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 80 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            description: discardedCardsList[discardedCardsList.length - 1].description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n        const updatedCategoryList = [...gameData.categoryList];\n        const updatedCardList = [...gameData.cardList];\n\n        const selectedCategory = updatedCategoryList[categoryIndex];\n        const restoredCard = selectedCategory.categoryCardList[cardIndex];\n\n        selectedCategory.categoryCardList.splice(cardIndex, 1);\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x - cardWidth / 2, y: position.y - 80 },\n            text: restoredCard.text,\n            description: restoredCard.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: updatedCategoryList,\n            cardList: updatedCardList,\n        }));\n    }\n    const handleRestoreInfoPanelCard = (position, card) => {\n        const updatedCardList = [...gameData.cardList];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x, y: position.y },\n            text: card.text,\n            description: card.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: updatedCardList,\n            infoPanelCard: null,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: newCategoryPosition.x, y: newCategoryPosition.y },\n            text: config.category.baseTitle + \" \" +(categoryList.length + 1),\n\n            categoryCardList: [],\n\n            zIndex: zIndexOrder,\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleDragStart = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n            setGameData((prevGameData) => {\n                const updatedCardList = [...prevGameData.cardList];\n                updatedCardList[cardIndex] = {\n                    ...updatedCardList[cardIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCardIndex: cardIndex,\n                    cardMoving: true,\n                    cardList: updatedCardList,\n                };\n            });\n        }\n        if (categoryIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n            setGameData((prevGameData) => {\n                const updatedCategoryList = [...prevGameData.categoryList];\n                updatedCategoryList[categoryIndex] = {\n                    ...updatedCategoryList[categoryIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    categoryList: updatedCategoryList,\n                };\n            });\n        }\n    };\n\n    const handleCardDragEnd = () => {\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            lastSelectedCardIndex: prevGameData.selectedCardIndex,\n            selectedCardIndex: null,\n            cardMoving: false,\n        }));\n    };\n    const handleCardMove = () => {\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n    const handleTouchMove = (e) => {\n        const touchX = e.touches[0].clientX;\n        const touchY = e.touches[0].clientY;\n\n        setMouseCoordinates({ x: touchX, y: touchY });\n    };\n\n    const updateCategoryText = (categoryIndex, newText) => {\n        setGameData((prevGameData) => {\n            const updatedCategoryList = [...prevGameData.categoryList];\n            updatedCategoryList[categoryIndex] = {\n                ...updatedCategoryList[categoryIndex],\n                text: newText,\n            };\n            return {\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            };\n        });\n    };\n\n    const generateResultTable = () => {\n        const resultTable = gameData.categoryList.map((category) => {\n            return {\n                categoryName: category.text,\n                jobs: category.categoryCardList.map((card) => card.text),\n            };\n        });\n        onResultSubmit(resultTable);\n    };\n    return (\n        <div\n            className=\"unselectable game-page background-grid\"\n            onMouseMove={handleMouseMove}\n            onTouchMove={handleTouchMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n                    elementRef={'CardPile'}\n                    onDragStart={handleDragStart}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onDragStart={handleDragStart}\n\n                onCancel={handleRestoreDiscardedCard}\n                discardedCardsList={gameData.discardedCardsList}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n            />\n            <InfoPanel\n                position={infoPanelPosition}\n\n                onDragStart={handleDragStart}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                droppedCard={gameData.infoPanelCard}\n\n                onCardRestored={handleRestoreInfoPanelCard}\n            />\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    categoryIndex={index}\n                    text={category.text}\n                    updateCategoryText={(newText) => updateCategoryText(index, newText)}\n\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n                    zIndexOrder={category.zIndex}\n\n                    onDragStart={() => handleDragStart(null, index)}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n\n                    onCardRestored={handleRestoreCategorizedCard}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n                        zIndexOrder={card.zIndex}\n\n                        onDragStart={() => handleDragStart(index, null)}\n                        onDragEnd={handleCardDragEnd}\n                        onDragMove={handleCardMove}\n                    />)\n            ))}\n\n            <div\n                className=\"ui-button-container ui-add-category-button\"\n            >\n                <div\n                    className=\"button button-normal\"\n                    onClick={handleAddCategory}\n                >\n                    {config.category.createButtonText}\n                </div>\n            </div>\n            {gameData.jobList.length === 0 && gameData.cardList.every((card) => !card.isActive) && (\n                <div className=\"ui-button-container ui-end-game-button\">\n                    <Link\n                        onClick={generateResultTable}\n                        to=\"/tri-cartes/result\"\n                        className=\"button button-normal\"\n                    >\n                        {config.result.endGameButton}\n                    </Link>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GamePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}