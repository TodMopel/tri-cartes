{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import Card from'./../components/Card';import CardPile from'./../components/CardPile';import Category from'./../components/Category';import CardDiscard from'./../components/CardDiscard';import InfoPanel from'./../components/InfoPanel';import'./../App.css';import config from'./../data/config';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const GamePage=_ref=>{let{jobListData,onResultSubmit}=_ref;const[gameData,setGameData]=useState(loadGameState()||getDefaultGameData());const[mouseCoordinates,setMouseCoordinates]=useState({x:0,y:0});const[zIndexOrder,setZIndexOrder]=useState(1);const pilePosition={x:window.innerWidth/2-55,y:window.innerHeight/2-40};const discardPosition={x:110,y:80};const infoPanelPosition={x:110,y:window.innerHeight-280};const newCategoryPosition={x:window.innerWidth/2-config.category.size.x/2,y:80};useEffect(()=>{saveGameState(gameData);},[gameData]);function getDefaultGameData(){return{jobList:jobListData,cardList:[],discardedCardsList:[],categoryList:[],infoPanelCard:null,selectedCardIndex:null,lastSelectedCardIndex:null,cardMoving:false,selectedCategoryIndex:null,lastSelectedCategoryIndex:null,categoryMoving:false};}function saveGameState(gameState){localStorage.setItem('gameState',JSON.stringify(gameState));}function loadGameState(){const savedState=localStorage.getItem('gameState');return savedState?JSON.parse(savedState):null;}function clearGameState(){localStorage.removeItem('gameState');}const handleCardDropOnDroppable=item=>{const droppedCard=gameData.cardList[gameData.lastSelectedCardIndex];droppedCard.isActive=false;if(item===\"Discard\"){setGameData(prevGameData=>({...prevGameData,discardedCardsList:[...prevGameData.discardedCardsList,droppedCard]}));}else if(item===\"InfoPanel\"){setGameData(prevGameData=>({...prevGameData,infoPanelCard:droppedCard}));}else{// c'est une categorie\nconst updatedCategoryList=gameData.categoryList.map(category=>{if(category.text===item){const updatedcategoryCardList=category.categoryCardList?[...category.categoryCardList,droppedCard]:[droppedCard];return{...category,categoryCardList:updatedcategoryCardList};}return category;});setGameData(prevGameData=>({...prevGameData,categoryList:updatedCategoryList}));}};const handleCategoryDropOnDroppable=item=>{const droppedCategory=gameData.categoryList[gameData.lastSelectedCategoryIndex];droppedCategory.isActive=false;if(item===\"Discard\"){handleDeleteCategory(droppedCategory);}};const handleAddCard=pilePosition=>{const{jobList}=gameData;if(jobList.length===0)return;const randomIndex=Math.floor(Math.random()*jobList.length);const selectedJob=jobList[randomIndex];const cardWidth=config.card.size.x;const newCard={position:{x:pilePosition.x-cardWidth/2,y:pilePosition.y-80},text:selectedJob.text,description:selectedJob.description,isActive:true,zIndex:zIndexOrder};const updatedJobList=jobList.filter((_,index)=>index!==randomIndex);setGameData(prevGameData=>({...prevGameData,cardList:[...prevGameData.cardList,newCard],jobList:updatedJobList}));};const handleRestoreDiscardedCard=discardPosition=>{const{discardedCardsList}=gameData;if(discardedCardsList.length===0)return;const cardWidth=config.card.size.x;const newCard={position:{x:discardPosition.x-cardWidth/2,y:discardPosition.y-80},text:discardedCardsList[discardedCardsList.length-1].text,description:discardedCardsList[discardedCardsList.length-1].description,isActive:true,zIndex:zIndexOrder};const updatedDiscardedCardsList=discardedCardsList.filter((_,index)=>index!==discardedCardsList.length-1);setGameData(prevGameData=>({...prevGameData,cardList:[...prevGameData.cardList,newCard],discardedCardsList:updatedDiscardedCardsList}));};const handleRestoreCategorizedCard=(position,categoryIndex,cardIndex)=>{const updatedCategoryList=[...gameData.categoryList];const updatedCardList=[...gameData.cardList];const selectedCategory=updatedCategoryList[categoryIndex];const restoredCard=selectedCategory.categoryCardList[cardIndex];selectedCategory.categoryCardList.splice(cardIndex,1);const cardWidth=config.card.size.x;const newCard={position:{x:position.x-cardWidth/2,y:position.y-80},text:restoredCard.text,description:restoredCard.description,isActive:true,zIndex:zIndexOrder};updatedCardList.push(newCard);setGameData(prevGameData=>({...prevGameData,categoryList:updatedCategoryList,cardList:updatedCardList}));};const handleRestoreInfoPanelCard=(position,card)=>{const updatedCardList=[...gameData.cardList];const cardWidth=config.card.size.x;const newCard={position:{x:position.x,y:position.y},text:card.text,description:card.description,isActive:true,zIndex:zIndexOrder};updatedCardList.push(newCard);setGameData(prevGameData=>({...prevGameData,cardList:updatedCardList,infoPanelCard:null}));};const handleAddCategory=()=>{const{categoryList}=gameData;const newCategory={position:{x:newCategoryPosition.x+getRandomOffset()/2,y:newCategoryPosition.y+getRandomOffset()},text:config.category.baseTitle+\" \"+(categoryList.length+1),categoryCardList:[],isActive:true,zIndex:zIndexOrder};setGameData(prevGameData=>({...prevGameData,categoryList:[...prevGameData.categoryList,newCategory]}));};const getRandomOffset=()=>{return Math.random()*30;};const handleDeleteCategory=droppedCategory=>{const droppedCardList=droppedCategory.categoryCardList;setGameData(prevGameData=>({...prevGameData,discardedCardsList:[...prevGameData.discardedCardsList,...droppedCardList]}));};const handleDragStart=(cardIndex,categoryIndex)=>{if(cardIndex!=null){setZIndexOrder(prevZIndexOrder=>prevZIndexOrder+1);setGameData(prevGameData=>{const updatedCardList=[...prevGameData.cardList];updatedCardList[cardIndex]={...updatedCardList[cardIndex],zIndex:zIndexOrder};return{...prevGameData,selectedCardIndex:cardIndex,cardMoving:true,cardList:updatedCardList};});}if(categoryIndex!=null){setZIndexOrder(prevZIndexOrder=>prevZIndexOrder+1);setGameData(prevGameData=>{const updatedCategoryList=[...prevGameData.categoryList];updatedCategoryList[categoryIndex]={...updatedCategoryList[categoryIndex],zIndex:zIndexOrder};return{...prevGameData,selectedCategoryIndex:categoryIndex,categoryMoving:true,categoryList:updatedCategoryList};});}};const handleDragEnd=(cardIndex,categoryIndex)=>{if(cardIndex!=null){setGameData(prevGameData=>({...prevGameData,lastSelectedCardIndex:prevGameData.selectedCardIndex,selectedCardIndex:null,cardMoving:false}));}if(categoryIndex!=null){setGameData(prevGameData=>({...prevGameData,lastSelectedCategoryIndex:prevGameData.selectedCategoryIndex,selectedCategoryIndex:null,categoryMoving:false}));}};const handleMouseMove=e=>{const mouseX=e.clientX;const mouseY=e.clientY;setMouseCoordinates({x:mouseX,y:mouseY});};const handleTouchMove=e=>{const touchX=e.touches[0].clientX;const touchY=e.touches[0].clientY;setMouseCoordinates({x:touchX,y:touchY});};const updateCategoryText=(categoryIndex,newText)=>{setGameData(prevGameData=>{const updatedCategoryList=[...prevGameData.categoryList];updatedCategoryList[categoryIndex]={...updatedCategoryList[categoryIndex],text:newText};return{...prevGameData,categoryList:updatedCategoryList};});};const generateResultTable=()=>{const resultTable=gameData.categoryList.filter(category=>category.isActive).map(category=>({categoryName:category.text,jobs:category.categoryCardList.map(card=>({text:card.text,isActive:true}))}));clearGameState();onResultSubmit(resultTable);};return/*#__PURE__*/_jsxs(\"div\",{className:\"unselectable game-page background-grid\",onMouseMove:handleMouseMove,onTouchMove:handleTouchMove,children:[gameData.jobList.length>-1&&/*#__PURE__*/_jsx(CardPile,{position:pilePosition,elementRef:'CardPile',onDragStart:handleDragStart,addCard:handleAddCard,counter:gameData.jobList.length}),/*#__PURE__*/_jsx(CardDiscard,{position:discardPosition,onDragStart:handleDragStart,onCancel:handleRestoreDiscardedCard,discardedCardsList:gameData.discardedCardsList,cardMoving:gameData.cardMoving,categoryMoving:gameData.categoryMoving,mousePosition:mouseCoordinates,onCardDropInsideDropZone:handleCardDropOnDroppable,onCategoryDropInsideDropZone:handleCategoryDropOnDroppable}),/*#__PURE__*/_jsx(InfoPanel,{position:infoPanelPosition,onDragStart:handleDragStart,cardMoving:gameData.cardMoving,mousePosition:mouseCoordinates,onCardDropInsideDropZone:handleCardDropOnDroppable,droppedCard:gameData.infoPanelCard,onCardRestored:handleRestoreInfoPanelCard}),gameData.categoryList.map((category,index)=>category.isActive&&/*#__PURE__*/_jsx(Category,{categoryIndex:index,text:category.text,updateCategoryText:newText=>updateCategoryText(index,newText),position:category.position,categoryCardList:category.categoryCardList,zIndexOrder:category.zIndex,onDragStart:()=>handleDragStart(null,index),onDragEnd:()=>handleDragEnd(null,index),cardMoving:gameData.cardMoving,mousePosition:mouseCoordinates,onCardDropInsideDropZone:handleCardDropOnDroppable,onCardRestored:handleRestoreCategorizedCard},index)),gameData.cardList.map((card,index)=>card.isActive&&/*#__PURE__*/_jsx(Card,{text:card.text,position:card.position,zIndexOrder:card.zIndex,onDragStart:()=>handleDragStart(index,null),onDragEnd:()=>handleDragEnd(index,null)},index)),/*#__PURE__*/_jsx(\"div\",{className:\"ui-button-container ui-add-category-button\",children:/*#__PURE__*/_jsx(\"div\",{className:\"button button-normal\",onClick:handleAddCategory,children:config.category.createButtonText})}),gameData.jobList.length===0&&gameData.cardList.every(card=>!card.isActive&&gameData.infoPanelCard===null)&&/*#__PURE__*/_jsx(\"div\",{className:\"ui-button-container ui-end-game-button\",children:/*#__PURE__*/_jsx(Link,{onClick:generateResultTable,to:\"/tri-cartes/result\",className:\"button button-normal\",children:config.result.endGameButton})})]});};export default GamePage;","map":{"version":3,"names":["React","useState","useEffect","Link","Card","CardPile","Category","CardDiscard","InfoPanel","config","jsx","_jsx","jsxs","_jsxs","GamePage","_ref","jobListData","onResultSubmit","gameData","setGameData","loadGameState","getDefaultGameData","mouseCoordinates","setMouseCoordinates","x","y","zIndexOrder","setZIndexOrder","pilePosition","window","innerWidth","innerHeight","discardPosition","infoPanelPosition","newCategoryPosition","category","size","saveGameState","jobList","cardList","discardedCardsList","categoryList","infoPanelCard","selectedCardIndex","lastSelectedCardIndex","cardMoving","selectedCategoryIndex","lastSelectedCategoryIndex","categoryMoving","gameState","localStorage","setItem","JSON","stringify","savedState","getItem","parse","clearGameState","removeItem","handleCardDropOnDroppable","item","droppedCard","isActive","prevGameData","updatedCategoryList","map","text","updatedcategoryCardList","categoryCardList","handleCategoryDropOnDroppable","droppedCategory","handleDeleteCategory","handleAddCard","length","randomIndex","Math","floor","random","selectedJob","cardWidth","card","newCard","position","description","zIndex","updatedJobList","filter","_","index","handleRestoreDiscardedCard","updatedDiscardedCardsList","handleRestoreCategorizedCard","categoryIndex","cardIndex","updatedCardList","selectedCategory","restoredCard","splice","push","handleRestoreInfoPanelCard","handleAddCategory","newCategory","getRandomOffset","baseTitle","droppedCardList","handleDragStart","prevZIndexOrder","handleDragEnd","handleMouseMove","e","mouseX","clientX","mouseY","clientY","handleTouchMove","touchX","touches","touchY","updateCategoryText","newText","generateResultTable","resultTable","categoryName","jobs","className","onMouseMove","onTouchMove","children","elementRef","onDragStart","addCard","counter","onCancel","mousePosition","onCardDropInsideDropZone","onCategoryDropInsideDropZone","onCardRestored","onDragEnd","onClick","createButtonText","every","to","result","endGameButton"],"sources":["/Users/todmopel/TheHangar/lesCentMétiers/tri-cartes/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\n\nimport config from './../data/config';\n\nconst GamePage = ({ jobListData, onResultSubmit }) => {\n    const [gameData, setGameData] = useState(loadGameState() || getDefaultGameData());\n    \n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n    const [zIndexOrder, setZIndexOrder] = useState(1);\n\n    const pilePosition = ({ x: window.innerWidth / 2 - 55, y: window.innerHeight / 2 - 40 });\n    const discardPosition = ({ x: 110, y: 80 });\n    const infoPanelPosition = ({ x: 110, y: window.innerHeight - 280 });\n    const newCategoryPosition = ({ x: window.innerWidth / 2 - config.category.size.x / 2, y: 80 });\n\n    useEffect(() => {\n        saveGameState(gameData);\n    }, [gameData]);\n\n    function getDefaultGameData() {\n        return {\n            jobList: jobListData,\n            cardList: [],\n            discardedCardsList: [],\n            categoryList: [],\n            infoPanelCard: null,\n            selectedCardIndex: null,\n            lastSelectedCardIndex: null,\n            cardMoving: false,\n            selectedCategoryIndex: null,\n            lastSelectedCategoryIndex: null,\n            categoryMoving: false,\n        };\n    }\n\n    function saveGameState(gameState) {\n        localStorage.setItem('gameState', JSON.stringify(gameState));\n    }\n\n    function loadGameState() {\n        const savedState = localStorage.getItem('gameState');\n        return savedState ? JSON.parse(savedState) : null;\n    }\n\n    function clearGameState() {\n        localStorage.removeItem('gameState');\n    }\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"InfoPanel\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                infoPanelCard: droppedCard,\n            }));\n        } else { // c'est une categorie\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n        }\n    }\n\n    const handleCategoryDropOnDroppable = (item) => {\n        const droppedCategory = gameData.categoryList[gameData.lastSelectedCategoryIndex];\n\n        droppedCategory.isActive = false;\n        if (item === \"Discard\") {\n            handleDeleteCategory(droppedCategory);\n        }\n    }\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 80 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 80 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            description: discardedCardsList[discardedCardsList.length - 1].description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n        const updatedCategoryList = [...gameData.categoryList];\n        const updatedCardList = [...gameData.cardList];\n\n        const selectedCategory = updatedCategoryList[categoryIndex];\n        const restoredCard = selectedCategory.categoryCardList[cardIndex];\n\n        selectedCategory.categoryCardList.splice(cardIndex, 1);\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x - cardWidth / 2, y: position.y - 80 },\n            text: restoredCard.text,\n            description: restoredCard.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: updatedCategoryList,\n            cardList: updatedCardList,\n        }));\n    }\n    const handleRestoreInfoPanelCard = (position, card) => {\n        const updatedCardList = [...gameData.cardList];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x, y: position.y },\n            text: card.text,\n            description: card.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: updatedCardList,\n            infoPanelCard: null,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: newCategoryPosition.x + getRandomOffset() / 2, y: newCategoryPosition.y + getRandomOffset()},\n            text: config.category.baseTitle + \" \" +(categoryList.length + 1),\n\n            categoryCardList: [],\n            isActive: true,\n\n            zIndex: zIndexOrder,\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n    const getRandomOffset = () => {\n        return Math.random() * 30;\n    };\n\n    const handleDeleteCategory = (droppedCategory) => {\n        const droppedCardList = droppedCategory.categoryCardList;\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            discardedCardsList: [...prevGameData.discardedCardsList, ...droppedCardList],\n        }));\n    }\n\n    const handleDragStart = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n\n            setGameData((prevGameData) => {\n                const updatedCardList = [...prevGameData.cardList];\n                updatedCardList[cardIndex] = {\n                    ...updatedCardList[cardIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCardIndex: cardIndex,\n                    cardMoving: true,\n                    cardList: updatedCardList,\n                };\n            });\n        }\n        if (categoryIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n\n            setGameData((prevGameData) => {\n                const updatedCategoryList = [...prevGameData.categoryList];\n                updatedCategoryList[categoryIndex] = {\n                    ...updatedCategoryList[categoryIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCategoryIndex: categoryIndex,\n                    categoryMoving: true,\n                    categoryList: updatedCategoryList,\n                };\n            });\n        }\n    };\n\n    const handleDragEnd = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                lastSelectedCardIndex: prevGameData.selectedCardIndex,\n                selectedCardIndex: null,\n                cardMoving: false,\n            }));\n        }\n        if (categoryIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                lastSelectedCategoryIndex: prevGameData.selectedCategoryIndex,\n                selectedCategoryIndex: null,\n                categoryMoving: false,\n            }));\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n    const handleTouchMove = (e) => {\n        const touchX = e.touches[0].clientX;\n        const touchY = e.touches[0].clientY;\n\n        setMouseCoordinates({ x: touchX, y: touchY });\n    };\n\n    const updateCategoryText = (categoryIndex, newText) => {\n        setGameData((prevGameData) => {\n            const updatedCategoryList = [...prevGameData.categoryList];\n            updatedCategoryList[categoryIndex] = {\n                ...updatedCategoryList[categoryIndex],\n                text: newText,\n            };\n            return {\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            };\n        });\n    };\n\n    const generateResultTable = () => {\n        const resultTable = gameData.categoryList\n        .filter((category) => category.isActive)\n        .map((category) => ({\n            categoryName: category.text,\n            jobs: category.categoryCardList.map((card) => ({\n                text: card.text,\n                isActive: true,\n            })),\n        }));\n        clearGameState();\n        onResultSubmit(resultTable);\n    };\n\n    return (\n        <div\n            className=\"unselectable game-page background-grid\"\n            onMouseMove={handleMouseMove}\n            onTouchMove={handleTouchMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n                    elementRef={'CardPile'}\n                    onDragStart={handleDragStart}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onDragStart={handleDragStart}\n\n                onCancel={handleRestoreDiscardedCard}\n                discardedCardsList={gameData.discardedCardsList}\n\n                cardMoving={gameData.cardMoving}\n                categoryMoving={gameData.categoryMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                onCategoryDropInsideDropZone={handleCategoryDropOnDroppable}\n            />\n            <InfoPanel\n                position={infoPanelPosition}\n\n                onDragStart={handleDragStart}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                droppedCard={gameData.infoPanelCard}\n\n                onCardRestored={handleRestoreInfoPanelCard}\n            />\n            {gameData.categoryList.map((category, index) => (\n                category.isActive && (\n                <Category\n                    key={index}\n                    categoryIndex={index}\n                    text={category.text}\n                    updateCategoryText={(newText) => updateCategoryText(index, newText)}\n\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n                    zIndexOrder={category.zIndex}\n\n                    onDragStart={() => handleDragStart(null, index)}\n                    onDragEnd={() => handleDragEnd(null, index)}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n\n                    onCardRestored={handleRestoreCategorizedCard}\n                />)\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n                        zIndexOrder={card.zIndex}\n\n                        onDragStart={() => handleDragStart(index, null)}\n                        onDragEnd={() => handleDragEnd(index, null)}\n                    />)\n            ))}\n\n            <div\n                className=\"ui-button-container ui-add-category-button\"\n            >\n                <div\n                    className=\"button button-normal\"\n                    onClick={handleAddCategory}\n                >\n                    {config.category.createButtonText}\n                </div>\n            </div>\n            {gameData.jobList.length === 0 && gameData.cardList.every((card) => !card.isActive && gameData.infoPanelCard === null) && (\n                <div className=\"ui-button-container ui-end-game-button\">\n                    <Link\n                        onClick={generateResultTable}\n                        to=\"/tri-cartes/result\"\n                        className=\"button button-normal\"\n                    >\n                        {config.result.endGameButton}\n                    </Link>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GamePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}