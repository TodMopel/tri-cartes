{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/lesCentMe\\u0301tiers/tri-cartes/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\nimport config from './../data/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = ({\n  jobListData,\n  onResultSubmit\n}) => {\n  _s();\n  const [gameData, setGameData] = useState(loadGameState() || getDefaultGameData());\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zIndexOrder, setZIndexOrder] = useState(1);\n  const pilePosition = {\n    x: window.innerWidth / 2 - 55,\n    y: window.innerHeight / 2 - 40\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  const infoPanelPosition = {\n    x: 110,\n    y: window.innerHeight - 280\n  };\n  const newCategoryPosition = {\n    x: window.innerWidth / 2 - config.category.size.x / 2,\n    y: 80\n  };\n  useEffect(() => {\n    saveGameState(gameData);\n  }, [gameData]);\n  function getDefaultGameData() {\n    return {\n      jobList: [],\n      cardList: [],\n      discardedCardsList: [],\n      categoryList: [],\n      infoPanelCard: null,\n      selectedCardIndex: null,\n      lastSelectedCardIndex: null,\n      cardMoving: false,\n      selectedCategoryIndex: null,\n      lastSelectedCategoryIndex: null,\n      categoryMoving: false\n    };\n  }\n  function saveGameState(gameState) {\n    localStorage.setItem('gameState', JSON.stringify(gameState));\n  }\n  function loadGameState() {\n    const savedState = localStorage.getItem('gameState');\n    return savedState ? JSON.parse(savedState) : null;\n  }\n  function clearGameState() {\n    localStorage.removeItem('gameState');\n  }\n  useEffect(() => {\n    if (!loadGameState()) {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        jobList: jobListData || []\n      }));\n    }\n  }, [jobListData]);\n  const handleCardDropOnDroppable = item => {\n    const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n    droppedCard.isActive = false;\n    if (item === \"Discard\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        discardedCardsList: [...prevGameData.discardedCardsList, droppedCard]\n      }));\n    } else if (item === \"InfoPanel\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        infoPanelCard: droppedCard\n      }));\n    } else {\n      // c'est une categorie\n      const updatedCategoryList = gameData.categoryList.map(category => {\n        if (category.text === item) {\n          const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n          return {\n            ...category,\n            categoryCardList: updatedcategoryCardList\n          };\n        }\n        return category;\n      });\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      }));\n    }\n  };\n  const handleCategoryDropOnDroppable = item => {\n    const droppedCategory = gameData.categoryList[gameData.lastSelectedCategoryIndex];\n    droppedCategory.isActive = false;\n    if (item === \"Discard\") {\n      handleDeleteCategory(droppedCategory);\n    }\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 80\n      },\n      text: selectedJob.text,\n      description: selectedJob.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleRestoreDiscardedCard = discardPosition => {\n    const {\n      discardedCardsList\n    } = gameData;\n    if (discardedCardsList.length === 0) return;\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: discardPosition.x - cardWidth / 2,\n        y: discardPosition.y - 80\n      },\n      text: discardedCardsList[discardedCardsList.length - 1].text,\n      description: discardedCardsList[discardedCardsList.length - 1].description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      discardedCardsList: updatedDiscardedCardsList\n    }));\n  };\n  const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n    const updatedCategoryList = [...gameData.categoryList];\n    const updatedCardList = [...gameData.cardList];\n    const selectedCategory = updatedCategoryList[categoryIndex];\n    const restoredCard = selectedCategory.categoryCardList[cardIndex];\n    selectedCategory.categoryCardList.splice(cardIndex, 1);\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: position.x - cardWidth / 2,\n        y: position.y - 80\n      },\n      text: restoredCard.text,\n      description: restoredCard.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: updatedCategoryList,\n      cardList: updatedCardList\n    }));\n  };\n  const handleRestoreInfoPanelCard = (position, card) => {\n    const updatedCardList = [...gameData.cardList];\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: position.x,\n        y: position.y\n      },\n      text: card.text,\n      description: card.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: updatedCardList,\n      infoPanelCard: null\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: newCategoryPosition.x + getRandomOffset() / 2,\n        y: newCategoryPosition.y + getRandomOffset()\n      },\n      text: config.category.baseTitle + \" \" + (categoryList.length + 1),\n      categoryCardList: [],\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const getRandomOffset = () => {\n    return Math.random() * 30;\n  };\n  const handleDeleteCategory = droppedCategory => {\n    const droppedCardList = droppedCategory.categoryCardList;\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      discardedCardsList: [...prevGameData.discardedCardsList, ...droppedCardList]\n    }));\n  };\n  const handleDragStart = (cardIndex, categoryIndex) => {\n    if (cardIndex != null) {\n      setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n      setGameData(prevGameData => {\n        const updatedCardList = [...prevGameData.cardList];\n        updatedCardList[cardIndex] = {\n          ...updatedCardList[cardIndex],\n          zIndex: zIndexOrder\n        };\n        return {\n          ...prevGameData,\n          selectedCardIndex: cardIndex,\n          cardMoving: true,\n          cardList: updatedCardList\n        };\n      });\n    }\n    if (categoryIndex != null) {\n      setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n      setGameData(prevGameData => {\n        const updatedCategoryList = [...prevGameData.categoryList];\n        updatedCategoryList[categoryIndex] = {\n          ...updatedCategoryList[categoryIndex],\n          zIndex: zIndexOrder\n        };\n        return {\n          ...prevGameData,\n          selectedCategoryIndex: categoryIndex,\n          categoryMoving: true,\n          categoryList: updatedCategoryList\n        };\n      });\n    }\n  };\n  const handleDragEnd = (cardIndex, categoryIndex) => {\n    if (cardIndex != null) {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        lastSelectedCardIndex: prevGameData.selectedCardIndex,\n        selectedCardIndex: null,\n        cardMoving: false\n      }));\n    }\n    if (categoryIndex != null) {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        lastSelectedCategoryIndex: prevGameData.selectedCategoryIndex,\n        selectedCategoryIndex: null,\n        categoryMoving: false\n      }));\n    }\n  };\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n  };\n  const handleTouchMove = e => {\n    const touchX = e.touches[0].clientX;\n    const touchY = e.touches[0].clientY;\n    setMouseCoordinates({\n      x: touchX,\n      y: touchY\n    });\n  };\n  const updateCategoryText = (categoryIndex, newText) => {\n    setGameData(prevGameData => {\n      const updatedCategoryList = [...prevGameData.categoryList];\n      updatedCategoryList[categoryIndex] = {\n        ...updatedCategoryList[categoryIndex],\n        text: newText\n      };\n      return {\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      };\n    });\n  };\n  const generateResultTable = () => {\n    const resultTable = gameData.categoryList.filter(category => category.isActive).map(category => ({\n      categoryName: category.text,\n      jobs: category.categoryCardList.map(card => ({\n        text: card.text,\n        isActive: true\n      }))\n    }));\n    clearGameState();\n    onResultSubmit(resultTable);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unselectable game-page background-grid\",\n    onMouseMove: handleMouseMove,\n    onTouchMove: handleTouchMove,\n    children: [gameData.jobList.length > -1 && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      elementRef: 'CardPile',\n      onDragStart: handleDragStart,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      onDragStart: handleDragStart,\n      onCancel: handleRestoreDiscardedCard,\n      discardedCardsList: gameData.discardedCardsList,\n      cardMoving: gameData.cardMoving,\n      categoryMoving: gameData.categoryMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      onCategoryDropInsideDropZone: handleCategoryDropOnDroppable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      position: infoPanelPosition,\n      onDragStart: handleDragStart,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      droppedCard: gameData.infoPanelCard,\n      onCardRestored: handleRestoreInfoPanelCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => category.isActive && /*#__PURE__*/_jsxDEV(Category, {\n      categoryIndex: index,\n      text: category.text,\n      updateCategoryText: newText => updateCategoryText(index, newText),\n      position: category.position,\n      categoryCardList: category.categoryCardList,\n      zIndexOrder: category.zIndex,\n      onDragStart: () => handleDragStart(null, index),\n      onDragEnd: () => handleDragEnd(null, index),\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      onCardRestored: handleRestoreCategorizedCard\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => card.isActive && /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      zIndexOrder: card.zIndex,\n      onDragStart: () => handleDragStart(index, null),\n      onDragEnd: () => handleDragEnd(index, null)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui-button-container ui-add-category-button\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button button-normal\",\n        onClick: handleAddCategory,\n        children: config.category.createButtonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this), gameData.jobList.length === 0 && gameData.cardList.every(card => !card.isActive && gameData.infoPanelCard === null) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui-button-container ui-end-game-button\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        onClick: generateResultTable,\n        to: \"/tri-cartes/result\",\n        className: \"button button-normal\",\n        children: config.result.endGameButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"nabEmsadPeAWf1heVfJIjh3FKQw=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","Card","CardPile","Category","CardDiscard","InfoPanel","config","jsxDEV","_jsxDEV","GamePage","jobListData","onResultSubmit","_s","gameData","setGameData","loadGameState","getDefaultGameData","mouseCoordinates","setMouseCoordinates","x","y","zIndexOrder","setZIndexOrder","pilePosition","window","innerWidth","innerHeight","discardPosition","infoPanelPosition","newCategoryPosition","category","size","saveGameState","jobList","cardList","discardedCardsList","categoryList","infoPanelCard","selectedCardIndex","lastSelectedCardIndex","cardMoving","selectedCategoryIndex","lastSelectedCategoryIndex","categoryMoving","gameState","localStorage","setItem","JSON","stringify","savedState","getItem","parse","clearGameState","removeItem","prevGameData","handleCardDropOnDroppable","item","droppedCard","isActive","updatedCategoryList","map","text","updatedcategoryCardList","categoryCardList","handleCategoryDropOnDroppable","droppedCategory","handleDeleteCategory","handleAddCard","length","randomIndex","Math","floor","random","selectedJob","cardWidth","card","newCard","position","description","zIndex","updatedJobList","filter","_","index","handleRestoreDiscardedCard","updatedDiscardedCardsList","handleRestoreCategorizedCard","categoryIndex","cardIndex","updatedCardList","selectedCategory","restoredCard","splice","push","handleRestoreInfoPanelCard","handleAddCategory","newCategory","getRandomOffset","baseTitle","droppedCardList","handleDragStart","prevZIndexOrder","handleDragEnd","handleMouseMove","e","mouseX","clientX","mouseY","clientY","handleTouchMove","touchX","touches","touchY","updateCategoryText","newText","generateResultTable","resultTable","categoryName","jobs","className","onMouseMove","onTouchMove","children","elementRef","onDragStart","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","mousePosition","onCardDropInsideDropZone","onCategoryDropInsideDropZone","onCardRestored","onDragEnd","onClick","createButtonText","every","to","result","endGameButton","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/lesCentMétiers/tri-cartes/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\n\nimport config from './../data/config';\n\nconst GamePage = ({ jobListData, onResultSubmit }) => {\n    const [gameData, setGameData] = useState(loadGameState() || getDefaultGameData());\n    \n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n    const [zIndexOrder, setZIndexOrder] = useState(1);\n\n    const pilePosition = ({ x: window.innerWidth / 2 - 55, y: window.innerHeight / 2 - 40 });\n    const discardPosition = ({ x: 110, y: 80 });\n    const infoPanelPosition = ({ x: 110, y: window.innerHeight - 280 });\n    const newCategoryPosition = ({ x: window.innerWidth / 2 - config.category.size.x / 2, y: 80 });\n\n    useEffect(() => {\n        saveGameState(gameData);\n    }, [gameData]);\n\n    function getDefaultGameData() {\n        return {\n            jobList: [],\n            cardList: [],\n            discardedCardsList: [],\n            categoryList: [],\n            infoPanelCard: null,\n            selectedCardIndex: null,\n            lastSelectedCardIndex: null,\n            cardMoving: false,\n            selectedCategoryIndex: null,\n            lastSelectedCategoryIndex: null,\n            categoryMoving: false,\n        };\n    }\n\n    function saveGameState(gameState) {\n        localStorage.setItem('gameState', JSON.stringify(gameState));\n    }\n\n    function loadGameState() {\n        const savedState = localStorage.getItem('gameState');\n        return savedState ? JSON.parse(savedState) : null;\n    }\n\n    function clearGameState() {\n        localStorage.removeItem('gameState');\n    }\n\n    useEffect(() => {\n        if (!loadGameState()) {\n            setGameData(prevGameData => ({\n                ...prevGameData,\n                jobList: jobListData || [],\n            }));\n        }\n    }, [jobListData]);\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"InfoPanel\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                infoPanelCard: droppedCard,\n            }));\n        } else { // c'est une categorie\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n        }\n    }\n\n    const handleCategoryDropOnDroppable = (item) => {\n        const droppedCategory = gameData.categoryList[gameData.lastSelectedCategoryIndex];\n\n        droppedCategory.isActive = false;\n        if (item === \"Discard\") {\n            handleDeleteCategory(droppedCategory);\n        }\n    }\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 80 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 80 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            description: discardedCardsList[discardedCardsList.length - 1].description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n        const updatedCategoryList = [...gameData.categoryList];\n        const updatedCardList = [...gameData.cardList];\n\n        const selectedCategory = updatedCategoryList[categoryIndex];\n        const restoredCard = selectedCategory.categoryCardList[cardIndex];\n\n        selectedCategory.categoryCardList.splice(cardIndex, 1);\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x - cardWidth / 2, y: position.y - 80 },\n            text: restoredCard.text,\n            description: restoredCard.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: updatedCategoryList,\n            cardList: updatedCardList,\n        }));\n    }\n    const handleRestoreInfoPanelCard = (position, card) => {\n        const updatedCardList = [...gameData.cardList];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x, y: position.y },\n            text: card.text,\n            description: card.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: updatedCardList,\n            infoPanelCard: null,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: newCategoryPosition.x + getRandomOffset() / 2, y: newCategoryPosition.y + getRandomOffset()},\n            text: config.category.baseTitle + \" \" +(categoryList.length + 1),\n\n            categoryCardList: [],\n            isActive: true,\n\n            zIndex: zIndexOrder,\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n    const getRandomOffset = () => {\n        return Math.random() * 30;\n    };\n\n    const handleDeleteCategory = (droppedCategory) => {\n        const droppedCardList = droppedCategory.categoryCardList;\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            discardedCardsList: [...prevGameData.discardedCardsList, ...droppedCardList],\n        }));\n    }\n\n    const handleDragStart = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n\n            setGameData((prevGameData) => {\n                const updatedCardList = [...prevGameData.cardList];\n                updatedCardList[cardIndex] = {\n                    ...updatedCardList[cardIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCardIndex: cardIndex,\n                    cardMoving: true,\n                    cardList: updatedCardList,\n                };\n            });\n        }\n        if (categoryIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n\n            setGameData((prevGameData) => {\n                const updatedCategoryList = [...prevGameData.categoryList];\n                updatedCategoryList[categoryIndex] = {\n                    ...updatedCategoryList[categoryIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCategoryIndex: categoryIndex,\n                    categoryMoving: true,\n                    categoryList: updatedCategoryList,\n                };\n            });\n        }\n    };\n\n    const handleDragEnd = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                lastSelectedCardIndex: prevGameData.selectedCardIndex,\n                selectedCardIndex: null,\n                cardMoving: false,\n            }));\n        }\n        if (categoryIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                lastSelectedCategoryIndex: prevGameData.selectedCategoryIndex,\n                selectedCategoryIndex: null,\n                categoryMoving: false,\n            }));\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n    const handleTouchMove = (e) => {\n        const touchX = e.touches[0].clientX;\n        const touchY = e.touches[0].clientY;\n\n        setMouseCoordinates({ x: touchX, y: touchY });\n    };\n\n    const updateCategoryText = (categoryIndex, newText) => {\n        setGameData((prevGameData) => {\n            const updatedCategoryList = [...prevGameData.categoryList];\n            updatedCategoryList[categoryIndex] = {\n                ...updatedCategoryList[categoryIndex],\n                text: newText,\n            };\n            return {\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            };\n        });\n    };\n\n    const generateResultTable = () => {\n        const resultTable = gameData.categoryList\n        .filter((category) => category.isActive)\n        .map((category) => ({\n            categoryName: category.text,\n            jobs: category.categoryCardList.map((card) => ({\n                text: card.text,\n                isActive: true,\n            })),\n        }));\n        clearGameState();\n        onResultSubmit(resultTable);\n    };\n\n    return (\n        <div\n            className=\"unselectable game-page background-grid\"\n            onMouseMove={handleMouseMove}\n            onTouchMove={handleTouchMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n                    elementRef={'CardPile'}\n                    onDragStart={handleDragStart}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onDragStart={handleDragStart}\n\n                onCancel={handleRestoreDiscardedCard}\n                discardedCardsList={gameData.discardedCardsList}\n\n                cardMoving={gameData.cardMoving}\n                categoryMoving={gameData.categoryMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                onCategoryDropInsideDropZone={handleCategoryDropOnDroppable}\n            />\n            <InfoPanel\n                position={infoPanelPosition}\n\n                onDragStart={handleDragStart}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                droppedCard={gameData.infoPanelCard}\n\n                onCardRestored={handleRestoreInfoPanelCard}\n            />\n            {gameData.categoryList.map((category, index) => (\n                category.isActive && (\n                <Category\n                    key={index}\n                    categoryIndex={index}\n                    text={category.text}\n                    updateCategoryText={(newText) => updateCategoryText(index, newText)}\n\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n                    zIndexOrder={category.zIndex}\n\n                    onDragStart={() => handleDragStart(null, index)}\n                    onDragEnd={() => handleDragEnd(null, index)}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n\n                    onCardRestored={handleRestoreCategorizedCard}\n                />)\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n                        zIndexOrder={card.zIndex}\n\n                        onDragStart={() => handleDragStart(index, null)}\n                        onDragEnd={() => handleDragEnd(index, null)}\n                    />)\n            ))}\n\n            <div\n                className=\"ui-button-container ui-add-category-button\"\n            >\n                <div\n                    className=\"button button-normal\"\n                    onClick={handleAddCategory}\n                >\n                    {config.category.createButtonText}\n                </div>\n            </div>\n            {gameData.jobList.length === 0 && gameData.cardList.every((card) => !card.isActive && gameData.infoPanelCard === null) && (\n                <div className=\"ui-button-container ui-end-game-button\">\n                    <Link\n                        onClick={generateResultTable}\n                        to=\"/tri-cartes/result\"\n                        className=\"button button-normal\"\n                    >\n                        {config.result.endGameButton}\n                    </Link>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GamePage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,IAAI,MAAM,sBAAsB;AACvC,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAO,cAAc;AAErB,OAAOC,MAAM,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAACiB,aAAa,CAAC,CAAC,IAAIC,kBAAkB,CAAC,CAAC,CAAC;EAEjF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC;IAAEqB,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EACxE,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMyB,YAAY,GAAI;IAAEJ,CAAC,EAAEK,MAAM,CAACC,UAAU,GAAG,CAAC,GAAG,EAAE;IAAEL,CAAC,EAAEI,MAAM,CAACE,WAAW,GAAG,CAAC,GAAG;EAAG,CAAE;EACxF,MAAMC,eAAe,GAAI;IAAER,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAG,CAAE;EAC3C,MAAMQ,iBAAiB,GAAI;IAAET,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAEI,MAAM,CAACE,WAAW,GAAG;EAAI,CAAE;EACnE,MAAMG,mBAAmB,GAAI;IAAEV,CAAC,EAAEK,MAAM,CAACC,UAAU,GAAG,CAAC,GAAGnB,MAAM,CAACwB,QAAQ,CAACC,IAAI,CAACZ,CAAC,GAAG,CAAC;IAAEC,CAAC,EAAE;EAAG,CAAE;EAE9FrB,SAAS,CAAC,MAAM;IACZiC,aAAa,CAACnB,QAAQ,CAAC;EAC3B,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,SAASG,kBAAkBA,CAAA,EAAG;IAC1B,OAAO;MACHiB,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,EAAE;MACZC,kBAAkB,EAAE,EAAE;MACtBC,YAAY,EAAE,EAAE;MAChBC,aAAa,EAAE,IAAI;MACnBC,iBAAiB,EAAE,IAAI;MACvBC,qBAAqB,EAAE,IAAI;MAC3BC,UAAU,EAAE,KAAK;MACjBC,qBAAqB,EAAE,IAAI;MAC3BC,yBAAyB,EAAE,IAAI;MAC/BC,cAAc,EAAE;IACpB,CAAC;EACL;EAEA,SAASX,aAAaA,CAACY,SAAS,EAAE;IAC9BC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC,CAAC;EAChE;EAEA,SAAS7B,aAAaA,CAAA,EAAG;IACrB,MAAMkC,UAAU,GAAGJ,YAAY,CAACK,OAAO,CAAC,WAAW,CAAC;IACpD,OAAOD,UAAU,GAAGF,IAAI,CAACI,KAAK,CAACF,UAAU,CAAC,GAAG,IAAI;EACrD;EAEA,SAASG,cAAcA,CAAA,EAAG;IACtBP,YAAY,CAACQ,UAAU,CAAC,WAAW,CAAC;EACxC;EAEAtD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACgB,aAAa,CAAC,CAAC,EAAE;MAClBD,WAAW,CAACwC,YAAY,KAAK;QACzB,GAAGA,YAAY;QACfrB,OAAO,EAAEvB,WAAW,IAAI;MAC5B,CAAC,CAAC,CAAC;IACP;EACJ,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAM6C,yBAAyB,GAAIC,IAAI,IAAK;IACxC,MAAMC,WAAW,GAAG5C,QAAQ,CAACqB,QAAQ,CAACrB,QAAQ,CAAC0B,qBAAqB,CAAC;IAErEkB,WAAW,CAACC,QAAQ,GAAG,KAAK;IAC5B,IAAIF,IAAI,KAAK,SAAS,EAAE;MACpB1C,WAAW,CAAEwC,YAAY,KAAM;QAC3B,GAAGA,YAAY;QACfnB,kBAAkB,EAAE,CAAC,GAAGmB,YAAY,CAACnB,kBAAkB,EAAEsB,WAAW;MACxE,CAAC,CAAC,CAAC;IACP,CAAC,MAAM,IAAID,IAAI,KAAK,WAAW,EAAE;MAC7B1C,WAAW,CAAEwC,YAAY,KAAM;QAC3B,GAAGA,YAAY;QACfjB,aAAa,EAAEoB;MACnB,CAAC,CAAC,CAAC;IACP,CAAC,MAAM;MAAE;MACL,MAAME,mBAAmB,GAAG9C,QAAQ,CAACuB,YAAY,CAACwB,GAAG,CAAE9B,QAAQ,IAAK;QAChE,IAAIA,QAAQ,CAAC+B,IAAI,KAAKL,IAAI,EAAE;UACxB,MAAMM,uBAAuB,GAAGhC,QAAQ,CAACiC,gBAAgB,GAAG,CAAC,GAAGjC,QAAQ,CAACiC,gBAAgB,EAAEN,WAAW,CAAC,GAAG,CAACA,WAAW,CAAC;UAEvH,OAAO;YACH,GAAG3B,QAAQ;YACXiC,gBAAgB,EAAED;UACtB,CAAC;QACL;QACA,OAAOhC,QAAQ;MACnB,CAAC,CAAC;MAEFhB,WAAW,CAAEwC,YAAY,KAAM;QAC3B,GAAGA,YAAY;QACflB,YAAY,EAAEuB;MAClB,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;EAED,MAAMK,6BAA6B,GAAIR,IAAI,IAAK;IAC5C,MAAMS,eAAe,GAAGpD,QAAQ,CAACuB,YAAY,CAACvB,QAAQ,CAAC6B,yBAAyB,CAAC;IAEjFuB,eAAe,CAACP,QAAQ,GAAG,KAAK;IAChC,IAAIF,IAAI,KAAK,SAAS,EAAE;MACpBU,oBAAoB,CAACD,eAAe,CAAC;IACzC;EACJ,CAAC;EAED,MAAME,aAAa,GAAI5C,YAAY,IAAK;IACpC,MAAM;MAAEU;IAAQ,CAAC,GAAGpB,QAAQ;IAE5B,IAAIoB,OAAO,CAACmC,MAAM,KAAK,CAAC,EAAE;IAE1B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGvC,OAAO,CAACmC,MAAM,CAAC;IAC9D,MAAMK,WAAW,GAAGxC,OAAO,CAACoC,WAAW,CAAC;IAExC,MAAMK,SAAS,GAAGpE,MAAM,CAACqE,IAAI,CAAC5C,IAAI,CAACZ,CAAC;IACpC,MAAMyD,OAAO,GAAG;MACZC,QAAQ,EAAE;QAAE1D,CAAC,EAAEI,YAAY,CAACJ,CAAC,GAAGuD,SAAS,GAAG,CAAC;QAAEtD,CAAC,EAAEG,YAAY,CAACH,CAAC,GAAG;MAAG,CAAC;MACvEyC,IAAI,EAAEY,WAAW,CAACZ,IAAI;MACtBiB,WAAW,EAAEL,WAAW,CAACK,WAAW;MACpCpB,QAAQ,EAAE,IAAI;MACdqB,MAAM,EAAE1D;IACZ,CAAC;IAED,MAAM2D,cAAc,GAAG/C,OAAO,CAACgD,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKd,WAAW,CAAC;IAE1EvD,WAAW,CAAEwC,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfpB,QAAQ,EAAE,CAAC,GAAGoB,YAAY,CAACpB,QAAQ,EAAE0C,OAAO,CAAC;MAC7C3C,OAAO,EAAE+C;IACb,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMI,0BAA0B,GAAIzD,eAAe,IAAK;IACpD,MAAM;MAAEQ;IAAmB,CAAC,GAAGtB,QAAQ;IAEvC,IAAIsB,kBAAkB,CAACiC,MAAM,KAAK,CAAC,EAAE;IAErC,MAAMM,SAAS,GAAGpE,MAAM,CAACqE,IAAI,CAAC5C,IAAI,CAACZ,CAAC;IACpC,MAAMyD,OAAO,GAAG;MACZC,QAAQ,EAAE;QAAE1D,CAAC,EAAEQ,eAAe,CAACR,CAAC,GAAGuD,SAAS,GAAG,CAAC;QAAEtD,CAAC,EAAEO,eAAe,CAACP,CAAC,GAAG;MAAG,CAAC;MAC7EyC,IAAI,EAAE1B,kBAAkB,CAACA,kBAAkB,CAACiC,MAAM,GAAG,CAAC,CAAC,CAACP,IAAI;MAC5DiB,WAAW,EAAE3C,kBAAkB,CAACA,kBAAkB,CAACiC,MAAM,GAAG,CAAC,CAAC,CAACU,WAAW;MAC1EpB,QAAQ,EAAE,IAAI;MACdqB,MAAM,EAAE1D;IACZ,CAAC;IACD,MAAMgE,yBAAyB,GAAGlD,kBAAkB,CAAC8C,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKhD,kBAAkB,CAACiC,MAAM,GAAG,CAAC,CAAC;IAElHtD,WAAW,CAAEwC,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfpB,QAAQ,EAAE,CAAC,GAAGoB,YAAY,CAACpB,QAAQ,EAAE0C,OAAO,CAAC;MAC7CzC,kBAAkB,EAAEkD;IACxB,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMC,4BAA4B,GAAGA,CAACT,QAAQ,EAAEU,aAAa,EAAEC,SAAS,KAAK;IACzE,MAAM7B,mBAAmB,GAAG,CAAC,GAAG9C,QAAQ,CAACuB,YAAY,CAAC;IACtD,MAAMqD,eAAe,GAAG,CAAC,GAAG5E,QAAQ,CAACqB,QAAQ,CAAC;IAE9C,MAAMwD,gBAAgB,GAAG/B,mBAAmB,CAAC4B,aAAa,CAAC;IAC3D,MAAMI,YAAY,GAAGD,gBAAgB,CAAC3B,gBAAgB,CAACyB,SAAS,CAAC;IAEjEE,gBAAgB,CAAC3B,gBAAgB,CAAC6B,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;IAEtD,MAAMd,SAAS,GAAGpE,MAAM,CAACqE,IAAI,CAAC5C,IAAI,CAACZ,CAAC;IACpC,MAAMyD,OAAO,GAAG;MACZC,QAAQ,EAAE;QAAE1D,CAAC,EAAE0D,QAAQ,CAAC1D,CAAC,GAAGuD,SAAS,GAAG,CAAC;QAAEtD,CAAC,EAAEyD,QAAQ,CAACzD,CAAC,GAAG;MAAG,CAAC;MAC/DyC,IAAI,EAAE8B,YAAY,CAAC9B,IAAI;MACvBiB,WAAW,EAAEa,YAAY,CAACb,WAAW;MACrCpB,QAAQ,EAAE,IAAI;MACdqB,MAAM,EAAE1D;IACZ,CAAC;IAEDoE,eAAe,CAACI,IAAI,CAACjB,OAAO,CAAC;IAE7B9D,WAAW,CAAEwC,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACflB,YAAY,EAAEuB,mBAAmB;MACjCzB,QAAQ,EAAEuD;IACd,CAAC,CAAC,CAAC;EACP,CAAC;EACD,MAAMK,0BAA0B,GAAGA,CAACjB,QAAQ,EAAEF,IAAI,KAAK;IACnD,MAAMc,eAAe,GAAG,CAAC,GAAG5E,QAAQ,CAACqB,QAAQ,CAAC;IAE9C,MAAMwC,SAAS,GAAGpE,MAAM,CAACqE,IAAI,CAAC5C,IAAI,CAACZ,CAAC;IACpC,MAAMyD,OAAO,GAAG;MACZC,QAAQ,EAAE;QAAE1D,CAAC,EAAE0D,QAAQ,CAAC1D,CAAC;QAAEC,CAAC,EAAEyD,QAAQ,CAACzD;MAAE,CAAC;MAC1CyC,IAAI,EAAEc,IAAI,CAACd,IAAI;MACfiB,WAAW,EAAEH,IAAI,CAACG,WAAW;MAC7BpB,QAAQ,EAAE,IAAI;MACdqB,MAAM,EAAE1D;IACZ,CAAC;IAEDoE,eAAe,CAACI,IAAI,CAACjB,OAAO,CAAC;IAE7B9D,WAAW,CAAEwC,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfpB,QAAQ,EAAEuD,eAAe;MACzBpD,aAAa,EAAE;IACnB,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAM0D,iBAAiB,GAAGA,CAAA,KAAM;IAC5B,MAAM;MAAE3D;IAAa,CAAC,GAAGvB,QAAQ;IAEjC,MAAMmF,WAAW,GAAG;MAChBnB,QAAQ,EAAE;QAAE1D,CAAC,EAAEU,mBAAmB,CAACV,CAAC,GAAG8E,eAAe,CAAC,CAAC,GAAG,CAAC;QAAE7E,CAAC,EAAES,mBAAmB,CAACT,CAAC,GAAG6E,eAAe,CAAC;MAAC,CAAC;MAC3GpC,IAAI,EAAEvD,MAAM,CAACwB,QAAQ,CAACoE,SAAS,GAAG,GAAG,IAAG9D,YAAY,CAACgC,MAAM,GAAG,CAAC,CAAC;MAEhEL,gBAAgB,EAAE,EAAE;MACpBL,QAAQ,EAAE,IAAI;MAEdqB,MAAM,EAAE1D;IACZ,CAAC;IAEDP,WAAW,CAAEwC,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACflB,YAAY,EAAE,CAAC,GAAGkB,YAAY,CAAClB,YAAY,EAAE4D,WAAW;IAC5D,CAAC,CAAC,CAAC;EACP,CAAC;EACD,MAAMC,eAAe,GAAGA,CAAA,KAAM;IAC1B,OAAO3B,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE;EAC7B,CAAC;EAED,MAAMN,oBAAoB,GAAID,eAAe,IAAK;IAC9C,MAAMkC,eAAe,GAAGlC,eAAe,CAACF,gBAAgB;IACxDjD,WAAW,CAAEwC,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfnB,kBAAkB,EAAE,CAAC,GAAGmB,YAAY,CAACnB,kBAAkB,EAAE,GAAGgE,eAAe;IAC/E,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMC,eAAe,GAAGA,CAACZ,SAAS,EAAED,aAAa,KAAK;IAClD,IAAIC,SAAS,IAAI,IAAI,EAAE;MACnBlE,cAAc,CAAC+E,eAAe,IAAIA,eAAe,GAAG,CAAC,CAAC;MAEtDvF,WAAW,CAAEwC,YAAY,IAAK;QAC1B,MAAMmC,eAAe,GAAG,CAAC,GAAGnC,YAAY,CAACpB,QAAQ,CAAC;QAClDuD,eAAe,CAACD,SAAS,CAAC,GAAG;UACzB,GAAGC,eAAe,CAACD,SAAS,CAAC;UAC7BT,MAAM,EAAE1D;QACZ,CAAC;QAED,OAAO;UACH,GAAGiC,YAAY;UACfhB,iBAAiB,EAAEkD,SAAS;UAC5BhD,UAAU,EAAE,IAAI;UAChBN,QAAQ,EAAEuD;QACd,CAAC;MACL,CAAC,CAAC;IACN;IACA,IAAIF,aAAa,IAAI,IAAI,EAAE;MACvBjE,cAAc,CAAC+E,eAAe,IAAIA,eAAe,GAAG,CAAC,CAAC;MAEtDvF,WAAW,CAAEwC,YAAY,IAAK;QAC1B,MAAMK,mBAAmB,GAAG,CAAC,GAAGL,YAAY,CAAClB,YAAY,CAAC;QAC1DuB,mBAAmB,CAAC4B,aAAa,CAAC,GAAG;UACjC,GAAG5B,mBAAmB,CAAC4B,aAAa,CAAC;UACrCR,MAAM,EAAE1D;QACZ,CAAC;QAED,OAAO;UACH,GAAGiC,YAAY;UACfb,qBAAqB,EAAE8C,aAAa;UACpC5C,cAAc,EAAE,IAAI;UACpBP,YAAY,EAAEuB;QAClB,CAAC;MACL,CAAC,CAAC;IACN;EACJ,CAAC;EAED,MAAM2C,aAAa,GAAGA,CAACd,SAAS,EAAED,aAAa,KAAK;IAChD,IAAIC,SAAS,IAAI,IAAI,EAAE;MACnB1E,WAAW,CAAEwC,YAAY,KAAM;QAC3B,GAAGA,YAAY;QACff,qBAAqB,EAAEe,YAAY,CAAChB,iBAAiB;QACrDA,iBAAiB,EAAE,IAAI;QACvBE,UAAU,EAAE;MAChB,CAAC,CAAC,CAAC;IACP;IACA,IAAI+C,aAAa,IAAI,IAAI,EAAE;MACvBzE,WAAW,CAAEwC,YAAY,KAAM;QAC3B,GAAGA,YAAY;QACfZ,yBAAyB,EAAEY,YAAY,CAACb,qBAAqB;QAC7DA,qBAAqB,EAAE,IAAI;QAC3BE,cAAc,EAAE;MACpB,CAAC,CAAC,CAAC;IACP;EACJ,CAAC;EAED,MAAM4D,eAAe,GAAIC,CAAC,IAAK;IAC3B,MAAMC,MAAM,GAAGD,CAAC,CAACE,OAAO;IACxB,MAAMC,MAAM,GAAGH,CAAC,CAACI,OAAO;IAExB1F,mBAAmB,CAAC;MAAEC,CAAC,EAAEsF,MAAM;MAAErF,CAAC,EAAEuF;IAAO,CAAC,CAAC;EACjD,CAAC;EACD,MAAME,eAAe,GAAIL,CAAC,IAAK;IAC3B,MAAMM,MAAM,GAAGN,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC,CAACL,OAAO;IACnC,MAAMM,MAAM,GAAGR,CAAC,CAACO,OAAO,CAAC,CAAC,CAAC,CAACH,OAAO;IAEnC1F,mBAAmB,CAAC;MAAEC,CAAC,EAAE2F,MAAM;MAAE1F,CAAC,EAAE4F;IAAO,CAAC,CAAC;EACjD,CAAC;EAED,MAAMC,kBAAkB,GAAGA,CAAC1B,aAAa,EAAE2B,OAAO,KAAK;IACnDpG,WAAW,CAAEwC,YAAY,IAAK;MAC1B,MAAMK,mBAAmB,GAAG,CAAC,GAAGL,YAAY,CAAClB,YAAY,CAAC;MAC1DuB,mBAAmB,CAAC4B,aAAa,CAAC,GAAG;QACjC,GAAG5B,mBAAmB,CAAC4B,aAAa,CAAC;QACrC1B,IAAI,EAAEqD;MACV,CAAC;MACD,OAAO;QACH,GAAG5D,YAAY;QACflB,YAAY,EAAEuB;MAClB,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAED,MAAMwD,mBAAmB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,WAAW,GAAGvG,QAAQ,CAACuB,YAAY,CACxC6C,MAAM,CAAEnD,QAAQ,IAAKA,QAAQ,CAAC4B,QAAQ,CAAC,CACvCE,GAAG,CAAE9B,QAAQ,KAAM;MAChBuF,YAAY,EAAEvF,QAAQ,CAAC+B,IAAI;MAC3ByD,IAAI,EAAExF,QAAQ,CAACiC,gBAAgB,CAACH,GAAG,CAAEe,IAAI,KAAM;QAC3Cd,IAAI,EAAEc,IAAI,CAACd,IAAI;QACfH,QAAQ,EAAE;MACd,CAAC,CAAC;IACN,CAAC,CAAC,CAAC;IACHN,cAAc,CAAC,CAAC;IAChBzC,cAAc,CAACyG,WAAW,CAAC;EAC/B,CAAC;EAED,oBACI5G,OAAA;IACI+G,SAAS,EAAC,wCAAwC;IAClDC,WAAW,EAAEjB,eAAgB;IAC7BkB,WAAW,EAAEZ,eAAgB;IAAAa,QAAA,GAE5B7G,QAAQ,CAACoB,OAAO,CAACmC,MAAM,GAAG,CAAC,CAAC,iBACzB5D,OAAA,CAACN,QAAQ;MACL2E,QAAQ,EAAEtD,YAAa;MACvBoG,UAAU,EAAE,UAAW;MACvBC,WAAW,EAAExB,eAAgB;MAE7ByB,OAAO,EAAE1D,aAAc;MACvB2D,OAAO,EAAEjH,QAAQ,CAACoB,OAAO,CAACmC;IAAO;MAAA2D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CACJ,eACD1H,OAAA,CAACJ,WAAW;MACRyE,QAAQ,EAAElD,eAAgB;MAE1BiG,WAAW,EAAExB,eAAgB;MAE7B+B,QAAQ,EAAE/C,0BAA2B;MACrCjD,kBAAkB,EAAEtB,QAAQ,CAACsB,kBAAmB;MAEhDK,UAAU,EAAE3B,QAAQ,CAAC2B,UAAW;MAChCG,cAAc,EAAE9B,QAAQ,CAAC8B,cAAe;MACxCyF,aAAa,EAAEnH,gBAAiB;MAEhCoH,wBAAwB,EAAE9E,yBAA0B;MACpD+E,4BAA4B,EAAEtE;IAA8B;MAAA+D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC,eACF1H,OAAA,CAACH,SAAS;MACNwE,QAAQ,EAAEjD,iBAAkB;MAE5BgG,WAAW,EAAExB,eAAgB;MAE7B5D,UAAU,EAAE3B,QAAQ,CAAC2B,UAAW;MAChC4F,aAAa,EAAEnH,gBAAiB;MAEhCoH,wBAAwB,EAAE9E,yBAA0B;MACpDE,WAAW,EAAE5C,QAAQ,CAACwB,aAAc;MAEpCkG,cAAc,EAAEzC;IAA2B;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EACDrH,QAAQ,CAACuB,YAAY,CAACwB,GAAG,CAAC,CAAC9B,QAAQ,EAAEqD,KAAK,KACvCrD,QAAQ,CAAC4B,QAAQ,iBACjBlD,OAAA,CAACL,QAAQ;MAELoF,aAAa,EAAEJ,KAAM;MACrBtB,IAAI,EAAE/B,QAAQ,CAAC+B,IAAK;MACpBoD,kBAAkB,EAAGC,OAAO,IAAKD,kBAAkB,CAAC9B,KAAK,EAAE+B,OAAO,CAAE;MAEpErC,QAAQ,EAAE/C,QAAQ,CAAC+C,QAAS;MAC5Bd,gBAAgB,EAAEjC,QAAQ,CAACiC,gBAAiB;MAC5C1C,WAAW,EAAES,QAAQ,CAACiD,MAAO;MAE7B6C,WAAW,EAAEA,CAAA,KAAMxB,eAAe,CAAC,IAAI,EAAEjB,KAAK,CAAE;MAChDqD,SAAS,EAAEA,CAAA,KAAMlC,aAAa,CAAC,IAAI,EAAEnB,KAAK,CAAE;MAE5C3C,UAAU,EAAE3B,QAAQ,CAAC2B,UAAW;MAChC4F,aAAa,EAAEnH,gBAAiB;MAEhCoH,wBAAwB,EAAE9E,yBAA0B;MAEpDgF,cAAc,EAAEjD;IAA6B,GAjBxCH,KAAK;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAkBb,CACJ,CAAC,EACDrH,QAAQ,CAACqB,QAAQ,CAAC0B,GAAG,CAAC,CAACe,IAAI,EAAEQ,KAAK,KAC/BR,IAAI,CAACjB,QAAQ,iBACTlD,OAAA,CAACP,IAAI;MAED4D,IAAI,EAAEc,IAAI,CAACd,IAAK;MAChBgB,QAAQ,EAAEF,IAAI,CAACE,QAAS;MACxBxD,WAAW,EAAEsD,IAAI,CAACI,MAAO;MAEzB6C,WAAW,EAAEA,CAAA,KAAMxB,eAAe,CAACjB,KAAK,EAAE,IAAI,CAAE;MAChDqD,SAAS,EAAEA,CAAA,KAAMlC,aAAa,CAACnB,KAAK,EAAE,IAAI;IAAE,GANvCA,KAAK;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAOb,CACR,CAAC,eAEF1H,OAAA;MACI+G,SAAS,EAAC,4CAA4C;MAAAG,QAAA,eAEtDlH,OAAA;QACI+G,SAAS,EAAC,sBAAsB;QAChCkB,OAAO,EAAE1C,iBAAkB;QAAA2B,QAAA,EAE1BpH,MAAM,CAACwB,QAAQ,CAAC4G;MAAgB;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,EACLrH,QAAQ,CAACoB,OAAO,CAACmC,MAAM,KAAK,CAAC,IAAIvD,QAAQ,CAACqB,QAAQ,CAACyG,KAAK,CAAEhE,IAAI,IAAK,CAACA,IAAI,CAACjB,QAAQ,IAAI7C,QAAQ,CAACwB,aAAa,KAAK,IAAI,CAAC,iBAClH7B,OAAA;MAAK+G,SAAS,EAAC,wCAAwC;MAAAG,QAAA,eACnDlH,OAAA,CAACR,IAAI;QACDyI,OAAO,EAAEtB,mBAAoB;QAC7ByB,EAAE,EAAC,oBAAoB;QACvBrB,SAAS,EAAC,sBAAsB;QAAAG,QAAA,EAE/BpH,MAAM,CAACuI,MAAM,CAACC;MAAa;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACtH,EAAA,CAvaIH,QAAQ;AAAAsI,EAAA,GAARtI,QAAQ;AAyad,eAAeA,QAAQ;AAAC,IAAAsI,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}