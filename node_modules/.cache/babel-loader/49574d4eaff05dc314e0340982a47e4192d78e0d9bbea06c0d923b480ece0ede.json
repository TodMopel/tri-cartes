{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/DragAndDropFramework.js\",\n  _s2 = $RefreshSig$();\n// DragAndDropFramework.js\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FORCED_ZOOM = 1; // Définissez la valeur appropriée pour FORCED_ZOOM\n\nconst DragAndDropFramework = ({\n  children\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [appState, setAppState] = useState({\n    mouseX: 0,\n    mouseY: 0,\n    lastMouseX: 0,\n    lastMouseY: 0,\n    skipMoves: 0,\n    selection: [],\n    draggingElement: false,\n    draggingHandle: false,\n    editingText: false,\n    hideTryDraggingStuff: false\n    // ... d'autres propriétés de l'état si nécessaire\n  });\n  const mouseDeltaX = state => Math.abs(state.mouseX - state.lastMouseX);\n  const mouseDeltaY = state => Math.abs(state.mouseY - state.lastMouseY);\n  useEffect(() => {\n    const handleMouseMove = e => {\n      const event = e.nativeEvent;\n      setAppState(prevAppState => ({\n        ...prevAppState,\n        lastMouseX: prevAppState.mouseX,\n        lastMouseY: prevAppState.mouseY,\n        mouseX: event.clientX,\n        mouseY: event.clientY,\n        skipMoves: (prevAppState.skipMoves || 0) + mouseDeltaX(prevAppState) + mouseDeltaY(prevAppState)\n      }));\n    };\n    document.addEventListener('mousemove', handleMouseMove);\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, []);\n  const shiftSelectedElements = state => {\n    const deltax = mouseDeltaX(state);\n    const deltaY = mouseDeltaY(state);\n    const shift = deltax / FORCED_ZOOM;\n    const shiftY = deltaY / FORCED_ZOOM;\n    if (state.draggingElement) {\n      state.selection.forEach(elId => {\n        const el = getElementByDragId(elId);\n        if (el) {\n          const {\n            x,\n            y,\n            scale\n          } = getTransform(el);\n          setTransform(el, {\n            x: x + shift,\n            y: y + shiftY,\n            scale\n          });\n        }\n      });\n    }\n\n    // Reste de la logique pour shiftSelectedElements\n\n    setAppState(prevAppState => ({\n      ...prevAppState,\n      hideTryDraggingStuff: true\n    }));\n  };\n  const getElementByDragId = id => {\n    // Implémentez la logique pour récupérer l'élément par son id\n  };\n  const getTransform = el => {\n    // Implémentez la logique pour obtenir la transformation de l'élément\n  };\n  const setTransform = (el, transform) => {\n    // Implémentez la logique pour définir la transformation de l'élément\n  };\n  const handleClick = e => {\n    _s();\n    const id = getDragTargetId(e.target);\n    if (id) {\n      if (e.shiftKey || e.metaKey) {\n        if (appState.selection.includes(id)) {\n          setAppState(prevAppState => ({\n            ...prevAppState,\n            selection: prevAppState.selection.filter(x => x !== id)\n          }));\n        } else {\n          setAppState(prevAppState => ({\n            ...prevAppState,\n            selection: [...prevAppState.selection, id]\n          }));\n        }\n      } else {\n        setAppState(prevAppState => ({\n          ...prevAppState,\n          selection: [id]\n        }));\n      }\n      useVisibleTask$(({\n        track\n      }) => track(() => {\n        if (appState.draggingElement || appState.draggingHandle) {\n          if (appState.skipMoves > 5) {\n            shiftSelectedElements(appState);\n          }\n        }\n      }));\n    }\n  };\n\n  // Render your component\n  _s(handleClick, \"Cca4QGW/C5QufHBXtOYHNnGfTio=\", true);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: handleClick,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 12\n  }, this);\n};\n_s2(DragAndDropFramework, \"qA8VVLPd2n3gsGWj69v7Nx1f7so=\");\n_c = DragAndDropFramework;\nexport default DragAndDropFramework;\nvar _c;\n$RefreshReg$(_c, \"DragAndDropFramework\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FORCED_ZOOM","DragAndDropFramework","children","_s2","_s","$RefreshSig$","appState","setAppState","mouseX","mouseY","lastMouseX","lastMouseY","skipMoves","selection","draggingElement","draggingHandle","editingText","hideTryDraggingStuff","mouseDeltaX","state","Math","abs","mouseDeltaY","handleMouseMove","e","event","nativeEvent","prevAppState","clientX","clientY","document","addEventListener","removeEventListener","shiftSelectedElements","deltax","deltaY","shift","shiftY","forEach","elId","el","getElementByDragId","x","y","scale","getTransform","setTransform","id","transform","handleClick","getDragTargetId","target","shiftKey","metaKey","includes","filter","useVisibleTask$","track","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/DragAndDropFramework.js"],"sourcesContent":["// DragAndDropFramework.js\n\nimport React, { useState, useEffect } from 'react';\n\nconst FORCED_ZOOM = 1; // Définissez la valeur appropriée pour FORCED_ZOOM\n\nconst DragAndDropFramework = ({ children }) => {\n    const [appState, setAppState] = useState({\n        mouseX: 0,\n        mouseY: 0,\n        lastMouseX: 0,\n        lastMouseY: 0,\n        skipMoves: 0,\n        selection: [],\n        draggingElement: false,\n        draggingHandle: false,\n        editingText: false,\n        hideTryDraggingStuff: false,\n        // ... d'autres propriétés de l'état si nécessaire\n    });\n\n    const mouseDeltaX = (state) => Math.abs(state.mouseX - state.lastMouseX);\n    const mouseDeltaY = (state) => Math.abs(state.mouseY - state.lastMouseY);\n\n    useEffect(() => {\n        const handleMouseMove = (e) => {\n            const event = e.nativeEvent;\n            setAppState((prevAppState) => ({\n                ...prevAppState,\n                lastMouseX: prevAppState.mouseX,\n                lastMouseY: prevAppState.mouseY,\n                mouseX: event.clientX,\n                mouseY: event.clientY,\n                skipMoves: (prevAppState.skipMoves || 0) + mouseDeltaX(prevAppState) + mouseDeltaY(prevAppState),\n            }));\n        };\n\n        document.addEventListener('mousemove', handleMouseMove);\n\n        return () => {\n            document.removeEventListener('mousemove', handleMouseMove);\n        };\n    }, []);\n\n    const shiftSelectedElements = (state) => {\n        const deltax = mouseDeltaX(state);\n        const deltaY = mouseDeltaY(state);\n\n        const shift = deltax / FORCED_ZOOM;\n        const shiftY = deltaY / FORCED_ZOOM;\n\n        if (state.draggingElement) {\n            state.selection.forEach((elId) => {\n                const el = getElementByDragId(elId);\n                if (el) {\n                    const { x, y, scale } = getTransform(el);\n                    setTransform(el, { x: x + shift, y: y + shiftY, scale });\n                }\n            });\n        }\n\n        // Reste de la logique pour shiftSelectedElements\n\n        setAppState((prevAppState) => ({ ...prevAppState, hideTryDraggingStuff: true }));\n    };\n\n    const getElementByDragId = (id) => {\n        // Implémentez la logique pour récupérer l'élément par son id\n    };\n\n    const getTransform = (el) => {\n        // Implémentez la logique pour obtenir la transformation de l'élément\n    };\n\n    const setTransform = (el, transform) => {\n        // Implémentez la logique pour définir la transformation de l'élément\n    };\n\n    const handleClick = (e) => {\n        const id = getDragTargetId(e.target);\n        if (id) {\n            if (e.shiftKey || e.metaKey) {\n                if (appState.selection.includes(id)) {\n                    setAppState((prevAppState) => ({\n                        ...prevAppState,\n                        selection: prevAppState.selection.filter((x) => x !== id),\n                    }));\n                } else {\n                    setAppState((prevAppState) => ({\n                        ...prevAppState,\n                        selection: [...prevAppState.selection, id],\n                    }));\n                }\n            } else {\n                setAppState((prevAppState) => ({ ...prevAppState, selection: [id] }));\n            }\n\n            useVisibleTask$(({ track }) =>\n                track(() => {\n                    if (appState.draggingElement || appState.draggingHandle) {\n                        if (appState.skipMoves > 5) {\n                            shiftSelectedElements(appState);\n                        }\n                    }\n                })\n            );\n        }\n    };\n\n    // Render your component\n    return <div onClick={handleClick}>{children}</div>;\n};\n\nexport default DragAndDropFramework;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}