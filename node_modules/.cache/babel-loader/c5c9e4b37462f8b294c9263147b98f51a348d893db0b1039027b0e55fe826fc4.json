{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js\",\n  _s = $RefreshSig$();\n// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    discardedCardsList: [],\n    selectedCardIndex: null,\n    lastSelectedCardIndex: null,\n    categoryList: [],\n    cardMoving: false,\n    elementOrder: []\n  });\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const pilePosition = {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  useEffect(() => {\n    if (gameData.jobList.length <= 0) {\n      fetchJobList();\n    }\n  }, []);\n  const fetchJobList = () => {\n    const jobListString = JSON.stringify(jobListData);\n    const jobListObject = JSON.parse(jobListString);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: Object.entries(jobListObject).map(([text, description]) => ({\n        text,\n        description\n      }))\n    }));\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 120\n      },\n      text: selectedJob.text,\n      description: selectedJob.description,\n      isActive: true\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleRestoreDiscardedCard = discardPosition => {\n    console.log(discardPosition);\n    const {\n      discardedCardsList\n    } = gameData;\n    if (discardedCardsList.length === 0) return;\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: discardPosition.x - cardWidth / 2,\n        y: discardPosition.y - 120\n      },\n      text: discardedCardsList[discardedCardsList.length - 1].text,\n      isActive: true\n    };\n    const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      discardedCardsList: updatedDiscardedCardsList\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: 10,\n        y: 20\n      },\n      text: \"categorie \" + (categoryList.length + 1),\n      categoryCardList: []\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleCardDropOnDroppable = item => {\n    const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n    //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n    droppedCard.isActive = false;\n    if (item === \"Discard\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        discardedCardsList: [...prevGameData.discardedCardsList, droppedCard]\n      }));\n    } else if (item === \"Info Panel\") {} else {\n      const updatedCategoryList = gameData.categoryList.map(category => {\n        if (category.text === item) {\n          const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n          return {\n            ...category,\n            categoryCardList: updatedcategoryCardList\n          };\n        }\n        return category;\n      });\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      }));\n      console.log(updatedCategoryList);\n    }\n  };\n  const handleCardDragStart = index => {\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      elementOrder: prevGameData.elementOrder.filter(item => item !== index).concat([index])\n    }));\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      selectedCardIndex: index,\n      cardMoving: true\n    }));\n  };\n  const handleCardDragEnd = () => {\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      lastSelectedCardIndex: prevGameData.selectedCardIndex,\n      selectedCardIndex: null,\n      cardMoving: false\n    }));\n  };\n  const handleCardMove = () => {};\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unselectable\",\n    onMouseMove: handleMouseMove,\n    children: [gameData.jobList.length > -1 && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      onCancel: handleRestoreDiscardedCard,\n      discardedCardsList: gameData.discardedCardsList,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCategory,\n      children: \"cr\\xE9er une cat\\xE9gorie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      text: category.text,\n      position: category.position,\n      categoryCardList: category.categoryCardList,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => card.isActive && /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      zIndex: gameData.elementOrder.indexOf(index) + 1,\n      onDragStart: () => handleCardDragStart(index),\n      onDragEnd: handleCardDragEnd,\n      onDragMove: handleCardMove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"MdwSJxhB/PUk1KrVgZFQpSoLPQ8=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","jobListData","Card","CardPile","Category","CardDiscard","jsxDEV","_jsxDEV","GamePage","_s","gameData","setGameData","jobList","cardList","discardedCardsList","selectedCardIndex","lastSelectedCardIndex","categoryList","cardMoving","elementOrder","mouseCoordinates","setMouseCoordinates","x","y","pilePosition","window","innerWidth","innerHeight","discardPosition","length","fetchJobList","jobListString","JSON","stringify","jobListObject","parse","prevGameData","Object","entries","map","text","description","handleAddCard","randomIndex","Math","floor","random","selectedJob","cardWidth","newCard","position","isActive","updatedJobList","filter","_","index","handleRestoreDiscardedCard","console","log","updatedDiscardedCardsList","handleAddCategory","newCategory","categoryCardList","handleCardDropOnDroppable","item","droppedCard","updatedCategoryList","category","updatedcategoryCardList","handleCardDragStart","concat","handleCardDragEnd","handleCardMove","handleMouseMove","e","mouseX","clientX","mouseY","clientY","className","onMouseMove","children","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","mousePosition","onCardDropInsideDropZone","onClick","card","zIndex","indexOf","onDragStart","onDragEnd","onDragMove","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js"],"sourcesContent":["// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\n\nconst GamePage = () => {\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        discardedCardsList: [],\n        selectedCardIndex: null,\n        lastSelectedCardIndex: null,\n        categoryList: [],\n        cardMoving: false,\n        elementOrder: [],\n    });\n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n\n    const pilePosition = ({ x: window.innerWidth / 2, y: window.innerHeight / 2 });\n    const discardPosition = ({ x: 110, y: 80 });\n\n    useEffect(() => {\n        if (gameData.jobList.length <= 0) {\n            fetchJobList();\n        }\n    }, []);\n\n    const fetchJobList = () => {\n        const jobListString = JSON.stringify(jobListData);\n        const jobListObject = JSON.parse(jobListString);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n        }));\n    };\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 120 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        console.log(discardPosition);\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 120 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            isActive: true,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: 10, y: 20 },\n            text: \"categorie \" + (categoryList.length + 1),\n            categoryCardList: [],\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"Info Panel\") {\n        } else {\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n            console.log(updatedCategoryList);\n        }\n    }\n\n    const handleCardDragStart = (index) => {\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            elementOrder: prevGameData.elementOrder.filter((item) => item !== index).concat([index]),\n        }));\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            selectedCardIndex: index,\n            cardMoving: true,\n        }));\n    };\n\n\n    const handleCardDragEnd = () => {\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            lastSelectedCardIndex: prevGameData.selectedCardIndex,\n            selectedCardIndex: null,\n            cardMoving: false,\n        }));\n    };\n    const handleCardMove = () => {\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n\n\n    return (\n        <div\n            className=\"unselectable\"\n            onMouseMove={handleMouseMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onCancel={handleRestoreDiscardedCard}\n\n                discardedCardsList={gameData.discardedCardsList}\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n            />\n            <button onClick={handleAddCategory}>créer une catégorie</button>\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    text={category.text}\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n\n                        zIndex={gameData.elementOrder.indexOf(index) + 1}\n                        onDragStart={() => handleCardDragStart(index)}\n                        onDragEnd={handleCardDragEnd}\n                        onDragMove={handleCardMove}\n                    />)\n            ))}\n        </div>\n    );\n};\n\nexport default GamePage;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}