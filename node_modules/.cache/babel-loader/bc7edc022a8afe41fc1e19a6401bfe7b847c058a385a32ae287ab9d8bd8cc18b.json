{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/test deploy/tri-cartes/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\nimport config from './../data/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = ({\n  jobListData,\n  onResultSubmit\n}) => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    discardedCardsList: [],\n    categoryList: [],\n    infoPanelCard: null,\n    selectedCardIndex: null,\n    lastSelectedCardIndex: null,\n    cardMoving: false,\n    selectedCategoryIndex: null,\n    lastSelectedCategoryIndex: null,\n    categoryMoving: false\n  });\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zIndexOrder, setZIndexOrder] = useState(1);\n  const pilePosition = {\n    x: window.innerWidth / 2 - 55,\n    y: window.innerHeight / 2 - 40\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  const infoPanelPosition = {\n    x: 110,\n    y: window.innerHeight - 280\n  };\n  const newCategoryPosition = {\n    x: window.innerWidth / 2 - config.category.size.x / 2,\n    y: 80\n  };\n  useEffect(() => {\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: jobListData || []\n    }));\n  }, [jobListData]);\n\n  //useEffect(() => {\n  //    if (gameData.jobList.length <= 0) {\n  //        fetchJobList();\n  //    }\n  //}, []);\n\n  //const fetchJobList = () => {\n  //    const jobListString = JSON.stringify(jobListData);\n  //    const jobListObject = JSON.parse(jobListString);\n\n  //    setGameData((prevGameData) => ({\n  //        ...prevGameData,\n  //        jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n  //    }));\n  //};\n\n  const handleCardDropOnDroppable = item => {\n    const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n    //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n    droppedCard.isActive = false;\n    if (item === \"Discard\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        discardedCardsList: [...prevGameData.discardedCardsList, droppedCard]\n      }));\n    } else if (item === \"InfoPanel\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        infoPanelCard: droppedCard\n      }));\n    } else {\n      // c'est une categorie\n      const updatedCategoryList = gameData.categoryList.map(category => {\n        if (category.text === item) {\n          const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n          return {\n            ...category,\n            categoryCardList: updatedcategoryCardList\n          };\n        }\n        return category;\n      });\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      }));\n    }\n  };\n  const onCategoryDropInsideDropZone = item => {\n    const droppedCategory = gameData.categoryList[gameData.lastSelectedCategoryIndex];\n    console.log(`Category ${droppedCard.text} dropped inside : ${item} `);\n    if (item === \"Discard\") {}\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 80\n      },\n      text: selectedJob.text,\n      description: selectedJob.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleRestoreDiscardedCard = discardPosition => {\n    const {\n      discardedCardsList\n    } = gameData;\n    if (discardedCardsList.length === 0) return;\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: discardPosition.x - cardWidth / 2,\n        y: discardPosition.y - 80\n      },\n      text: discardedCardsList[discardedCardsList.length - 1].text,\n      description: discardedCardsList[discardedCardsList.length - 1].description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      discardedCardsList: updatedDiscardedCardsList\n    }));\n  };\n  const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n    const updatedCategoryList = [...gameData.categoryList];\n    const updatedCardList = [...gameData.cardList];\n    const selectedCategory = updatedCategoryList[categoryIndex];\n    const restoredCard = selectedCategory.categoryCardList[cardIndex];\n    selectedCategory.categoryCardList.splice(cardIndex, 1);\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: position.x - cardWidth / 2,\n        y: position.y - 80\n      },\n      text: restoredCard.text,\n      description: restoredCard.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: updatedCategoryList,\n      cardList: updatedCardList\n    }));\n  };\n  const handleRestoreInfoPanelCard = (position, card) => {\n    const updatedCardList = [...gameData.cardList];\n    const cardWidth = config.card.size.x;\n    const newCard = {\n      position: {\n        x: position.x,\n        y: position.y\n      },\n      text: card.text,\n      description: card.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: updatedCardList,\n      infoPanelCard: null\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: newCategoryPosition.x,\n        y: newCategoryPosition.y\n      },\n      text: config.category.baseTitle + \" \" + (categoryList.length + 1),\n      categoryCardList: [],\n      zIndex: zIndexOrder\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleDeleteCategory = () => {};\n  const handleDragStart = (cardIndex, categoryIndex) => {\n    if (cardIndex != null) {\n      setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n      setGameData(prevGameData => {\n        const updatedCardList = [...prevGameData.cardList];\n        updatedCardList[cardIndex] = {\n          ...updatedCardList[cardIndex],\n          zIndex: zIndexOrder\n        };\n        return {\n          ...prevGameData,\n          selectedCardIndex: cardIndex,\n          cardMoving: true,\n          cardList: updatedCardList\n        };\n      });\n    }\n    if (categoryIndex != null) {\n      setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n      setGameData(prevGameData => {\n        const updatedCategoryList = [...prevGameData.categoryList];\n        updatedCategoryList[categoryIndex] = {\n          ...updatedCategoryList[categoryIndex],\n          zIndex: zIndexOrder\n        };\n        return {\n          ...prevGameData,\n          selectedCategoryIndex: categoryIndex,\n          categoryMoving: true,\n          categoryList: updatedCategoryList\n        };\n      });\n    }\n  };\n  const handleDragEnd = (cardIndex, categoryIndex) => {\n    if (cardIndex != null) {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        lastSelectedCardIndex: prevGameData.selectedCardIndex,\n        selectedCardIndex: null,\n        cardMoving: false\n      }));\n    }\n    if (categoryIndex != null) {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        lastSelectedCategoryIndex: prevGameData.selectedCategoryIndex,\n        selectedCategoryIndex: null,\n        categoryMoving: false\n      }));\n    }\n  };\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n  };\n  const handleTouchMove = e => {\n    const touchX = e.touches[0].clientX;\n    const touchY = e.touches[0].clientY;\n    setMouseCoordinates({\n      x: touchX,\n      y: touchY\n    });\n  };\n  const updateCategoryText = (categoryIndex, newText) => {\n    setGameData(prevGameData => {\n      const updatedCategoryList = [...prevGameData.categoryList];\n      updatedCategoryList[categoryIndex] = {\n        ...updatedCategoryList[categoryIndex],\n        text: newText\n      };\n      return {\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      };\n    });\n  };\n  const generateResultTable = () => {\n    const resultTable = gameData.categoryList.map(category => {\n      return {\n        categoryName: category.text,\n        jobs: category.categoryCardList.map(card => card.text)\n      };\n    });\n    onResultSubmit(resultTable);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unselectable game-page background-grid\",\n    onMouseMove: handleMouseMove,\n    onTouchMove: handleTouchMove,\n    children: [gameData.jobList.length > -1 && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      elementRef: 'CardPile',\n      onDragStart: handleDragStart,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      onDragStart: handleDragStart,\n      onCancel: handleRestoreDiscardedCard,\n      discardedCardsList: gameData.discardedCardsList,\n      cardMoving: gameData.cardMoving,\n      categoryMoving: gameData.categoryMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      position: infoPanelPosition,\n      onDragStart: handleDragStart,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      droppedCard: gameData.infoPanelCard,\n      onCardRestored: handleRestoreInfoPanelCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      categoryIndex: index,\n      text: category.text,\n      updateCategoryText: newText => updateCategoryText(index, newText),\n      position: category.position,\n      categoryCardList: category.categoryCardList,\n      zIndexOrder: category.zIndex,\n      onDragStart: () => handleDragStart(null, index),\n      onDragEnd: () => handleDragEnd(null, index),\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      onCardRestored: handleRestoreCategorizedCard\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => card.isActive && /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      zIndexOrder: card.zIndex,\n      onDragStart: () => handleDragStart(index, null),\n      onDragEnd: () => handleDragEnd(index, null),\n      onDragMove: handleCardMove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui-button-container ui-add-category-button\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button button-normal\",\n        onClick: handleAddCategory,\n        children: config.category.createButtonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 13\n    }, this), gameData.jobList.length === 0 && gameData.cardList.every(card => !card.isActive && gameData.infoPanelCard === null) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui-button-container ui-end-game-button\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        onClick: generateResultTable,\n        to: \"/tri-cartes/result\",\n        className: \"button button-normal\",\n        children: config.result.endGameButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"PtQLU0OQqYzG8g/w0g0/C1nHlVw=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","Link","Card","CardPile","Category","CardDiscard","InfoPanel","config","jsxDEV","_jsxDEV","GamePage","jobListData","onResultSubmit","_s","gameData","setGameData","jobList","cardList","discardedCardsList","categoryList","infoPanelCard","selectedCardIndex","lastSelectedCardIndex","cardMoving","selectedCategoryIndex","lastSelectedCategoryIndex","categoryMoving","mouseCoordinates","setMouseCoordinates","x","y","zIndexOrder","setZIndexOrder","pilePosition","window","innerWidth","innerHeight","discardPosition","infoPanelPosition","newCategoryPosition","category","size","prevGameData","handleCardDropOnDroppable","item","droppedCard","isActive","updatedCategoryList","map","text","updatedcategoryCardList","categoryCardList","onCategoryDropInsideDropZone","droppedCategory","console","log","handleAddCard","length","randomIndex","Math","floor","random","selectedJob","cardWidth","card","newCard","position","description","zIndex","updatedJobList","filter","_","index","handleRestoreDiscardedCard","updatedDiscardedCardsList","handleRestoreCategorizedCard","categoryIndex","cardIndex","updatedCardList","selectedCategory","restoredCard","splice","push","handleRestoreInfoPanelCard","handleAddCategory","newCategory","baseTitle","handleDeleteCategory","handleDragStart","prevZIndexOrder","handleDragEnd","handleMouseMove","e","mouseX","clientX","mouseY","clientY","handleTouchMove","touchX","touches","touchY","updateCategoryText","newText","generateResultTable","resultTable","categoryName","jobs","className","onMouseMove","onTouchMove","children","elementRef","onDragStart","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","mousePosition","onCardDropInsideDropZone","onCardRestored","onDragEnd","onDragMove","handleCardMove","onClick","createButtonText","every","to","result","endGameButton","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/test deploy/tri-cartes/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\n\nimport config from './../data/config';\n\nconst GamePage = ({ jobListData, onResultSubmit }) => {\n\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        discardedCardsList: [],\n        categoryList: [],\n        infoPanelCard: null,\n        selectedCardIndex: null,\n        lastSelectedCardIndex: null,\n        cardMoving: false,\n        selectedCategoryIndex: null,\n        lastSelectedCategoryIndex: null,\n        categoryMoving: false,\n    });\n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n    const [zIndexOrder, setZIndexOrder] = useState(1);\n\n    const pilePosition = ({ x: window.innerWidth / 2 - 55, y: window.innerHeight / 2 - 40 });\n    const discardPosition = ({ x: 110, y: 80 });\n    const infoPanelPosition = ({ x: 110, y: window.innerHeight - 280 });\n    const newCategoryPosition = ({ x: window.innerWidth / 2 - config.category.size.x / 2, y: 80 });\n\n    useEffect(() => {\n        setGameData(prevGameData => ({\n            ...prevGameData,\n            jobList: jobListData || [],\n        }));\n    }, [jobListData]);\n\n    //useEffect(() => {\n    //    if (gameData.jobList.length <= 0) {\n    //        fetchJobList();\n    //    }\n    //}, []);\n\n    //const fetchJobList = () => {\n    //    const jobListString = JSON.stringify(jobListData);\n    //    const jobListObject = JSON.parse(jobListString);\n\n    //    setGameData((prevGameData) => ({\n    //        ...prevGameData,\n    //        jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n    //    }));\n    //};\n\n\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"InfoPanel\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                infoPanelCard: droppedCard,\n            }));\n        } else { // c'est une categorie\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n        }\n    }\n\n    const onCategoryDropInsideDropZone = (item) => {\n        const droppedCategory = gameData.categoryList[gameData.lastSelectedCategoryIndex];\n\n        console.log(`Category ${droppedCard.text} dropped inside : ${item} `);\n\n        if (item === \"Discard\") {\n        }\n    }\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 80 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 80 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            description: discardedCardsList[discardedCardsList.length - 1].description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n        const updatedCategoryList = [...gameData.categoryList];\n        const updatedCardList = [...gameData.cardList];\n\n        const selectedCategory = updatedCategoryList[categoryIndex];\n        const restoredCard = selectedCategory.categoryCardList[cardIndex];\n\n        selectedCategory.categoryCardList.splice(cardIndex, 1);\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x - cardWidth / 2, y: position.y - 80 },\n            text: restoredCard.text,\n            description: restoredCard.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: updatedCategoryList,\n            cardList: updatedCardList,\n        }));\n    }\n    const handleRestoreInfoPanelCard = (position, card) => {\n        const updatedCardList = [...gameData.cardList];\n\n        const cardWidth = config.card.size.x;\n        const newCard = {\n            position: { x: position.x, y: position.y },\n            text: card.text,\n            description: card.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: updatedCardList,\n            infoPanelCard: null,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: newCategoryPosition.x, y: newCategoryPosition.y },\n            text: config.category.baseTitle + \" \" +(categoryList.length + 1),\n\n            categoryCardList: [],\n\n            zIndex: zIndexOrder,\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleDeleteCategory = () => {\n\n    }\n\n    const handleDragStart = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n\n            setGameData((prevGameData) => {\n                const updatedCardList = [...prevGameData.cardList];\n                updatedCardList[cardIndex] = {\n                    ...updatedCardList[cardIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCardIndex: cardIndex,\n                    cardMoving: true,\n                    cardList: updatedCardList,\n                };\n            });\n        }\n        if (categoryIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n\n            setGameData((prevGameData) => {\n                const updatedCategoryList = [...prevGameData.categoryList];\n                updatedCategoryList[categoryIndex] = {\n                    ...updatedCategoryList[categoryIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCategoryIndex: categoryIndex,\n                    categoryMoving: true,\n                    categoryList: updatedCategoryList,\n                };\n            });\n        }\n    };\n\n    const handleDragEnd = (cardIndex, categoryIndex) => {\n        if (cardIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                lastSelectedCardIndex: prevGameData.selectedCardIndex,\n                selectedCardIndex: null,\n                cardMoving: false,\n            }));\n        }\n        if (categoryIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                lastSelectedCategoryIndex: prevGameData.selectedCategoryIndex,\n                selectedCategoryIndex: null,\n                categoryMoving: false,\n            }));\n        }\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n    const handleTouchMove = (e) => {\n        const touchX = e.touches[0].clientX;\n        const touchY = e.touches[0].clientY;\n\n        setMouseCoordinates({ x: touchX, y: touchY });\n    };\n\n    const updateCategoryText = (categoryIndex, newText) => {\n        setGameData((prevGameData) => {\n            const updatedCategoryList = [...prevGameData.categoryList];\n            updatedCategoryList[categoryIndex] = {\n                ...updatedCategoryList[categoryIndex],\n                text: newText,\n            };\n            return {\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            };\n        });\n    };\n\n    const generateResultTable = () => {\n        const resultTable = gameData.categoryList.map((category) => {\n            return {\n                categoryName: category.text,\n                jobs: category.categoryCardList.map((card) => card.text),\n            };\n        });\n        onResultSubmit(resultTable);\n    };\n    return (\n        <div\n            className=\"unselectable game-page background-grid\"\n            onMouseMove={handleMouseMove}\n            onTouchMove={handleTouchMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n                    elementRef={'CardPile'}\n                    onDragStart={handleDragStart}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onDragStart={handleDragStart}\n\n                onCancel={handleRestoreDiscardedCard}\n                discardedCardsList={gameData.discardedCardsList}\n\n                cardMoving={gameData.cardMoving}\n                categoryMoving={gameData.categoryMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n            />\n            <InfoPanel\n                position={infoPanelPosition}\n\n                onDragStart={handleDragStart}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                droppedCard={gameData.infoPanelCard}\n\n                onCardRestored={handleRestoreInfoPanelCard}\n            />\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    categoryIndex={index}\n                    text={category.text}\n                    updateCategoryText={(newText) => updateCategoryText(index, newText)}\n\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n                    zIndexOrder={category.zIndex}\n\n                    onDragStart={() => handleDragStart(null, index)}\n                    onDragEnd={() => handleDragEnd(null, index)}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n\n                    onCardRestored={handleRestoreCategorizedCard}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n                        zIndexOrder={card.zIndex}\n\n                        onDragStart={() => handleDragStart(index, null)}\n                        onDragEnd={() => handleDragEnd(index, null)}\n                        onDragMove={handleCardMove}\n                    />)\n            ))}\n\n            <div\n                className=\"ui-button-container ui-add-category-button\"\n            >\n                <div\n                    className=\"button button-normal\"\n                    onClick={handleAddCategory}\n                >\n                    {config.category.createButtonText}\n                </div>\n            </div>\n            {gameData.jobList.length === 0 && gameData.cardList.every((card) => !card.isActive && gameData.infoPanelCard === null) && (\n                <div className=\"ui-button-container ui-end-game-button\">\n                    <Link\n                        onClick={generateResultTable}\n                        to=\"/tri-cartes/result\"\n                        className=\"button button-normal\"\n                    >\n                        {config.result.endGameButton}\n                    </Link>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default GamePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}