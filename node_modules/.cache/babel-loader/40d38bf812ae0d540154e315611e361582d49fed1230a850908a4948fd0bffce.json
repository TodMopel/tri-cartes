{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\nimport config from './../data/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = ({\n  jobListData\n}) => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    discardedCardsList: [],\n    categoryList: [],\n    infoPanelCard: null,\n    selectedCardIndex: null,\n    lastSelectedCardIndex: null,\n    cardMoving: false\n  });\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zIndexOrder, setZIndexOrder] = useState(1);\n  const pilePosition = {\n    x: window.innerWidth / 2 - 55,\n    y: window.innerHeight / 2 - 40\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  const infoPanelPosition = {\n    x: 110,\n    y: window.innerHeight - 280\n  };\n  const newCategoryButtonPosition = {\n    x: window.innerWidth / 2,\n    y: 0\n  };\n  const newCategoryPosition = {\n    x: window.innerWidth / 2,\n    y: 30\n  };\n  useEffect(() => {\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: jobListData || []\n    }));\n  }, [jobListData]);\n\n  //useEffect(() => {\n  //    if (gameData.jobList.length <= 0) {\n  //        fetchJobList();\n  //    }\n  //}, []);\n\n  //const fetchJobList = () => {\n  //    const jobListString = JSON.stringify(jobListData);\n  //    const jobListObject = JSON.parse(jobListString);\n\n  //    setGameData((prevGameData) => ({\n  //        ...prevGameData,\n  //        jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n  //    }));\n  //};\n\n  const handleCardDropOnDroppable = item => {\n    const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n    console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n    droppedCard.isActive = false;\n    if (item === \"Discard\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        discardedCardsList: [...prevGameData.discardedCardsList, droppedCard]\n      }));\n    } else if (item === \"InfoPanel\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        infoPanelCard: droppedCard\n      }));\n    } else {\n      // c'est une categorie\n      const updatedCategoryList = gameData.categoryList.map(category => {\n        if (category.text === item) {\n          const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n          return {\n            ...category,\n            categoryCardList: updatedcategoryCardList\n          };\n        }\n        return category;\n      });\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      }));\n    }\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 80\n      },\n      text: selectedJob.text,\n      description: selectedJob.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleRestoreDiscardedCard = discardPosition => {\n    const {\n      discardedCardsList\n    } = gameData;\n    if (discardedCardsList.length === 0) return;\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: discardPosition.x - cardWidth / 2,\n        y: discardPosition.y - 80\n      },\n      text: discardedCardsList[discardedCardsList.length - 1].text,\n      description: discardedCardsList[discardedCardsList.length - 1].description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      discardedCardsList: updatedDiscardedCardsList\n    }));\n  };\n  const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n    const updatedCategoryList = [...gameData.categoryList];\n    const updatedCardList = [...gameData.cardList];\n    const selectedCategory = updatedCategoryList[categoryIndex];\n    const restoredCard = selectedCategory.categoryCardList[cardIndex];\n    selectedCategory.categoryCardList.splice(cardIndex, 1);\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: position.x - cardWidth / 2,\n        y: position.y - 80\n      },\n      text: restoredCard.text,\n      description: restoredCard.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: updatedCategoryList,\n      cardList: updatedCardList\n    }));\n  };\n  const handleRestoreInfoPanelCard = (position, card) => {\n    const updatedCardList = [...gameData.cardList];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: position.x,\n        y: position.y\n      },\n      text: card.text,\n      description: card.description,\n      isActive: true,\n      zIndex: zIndexOrder\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: updatedCardList,\n      infoPanelCard: null\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: newCategoryPosition.x,\n        y: newCategoryPosition.y\n      },\n      text: config.category.baseTitle + (categoryList.length + 1),\n      categoryCardList: []\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleDragStart = cardIndex => {\n    if (cardIndex != null) {\n      setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n      setGameData(prevGameData => {\n        const updatedCardList = [...prevGameData.cardList];\n        updatedCardList[cardIndex] = {\n          ...updatedCardList[cardIndex],\n          zIndex: zIndexOrder\n        };\n        return {\n          ...prevGameData,\n          selectedCardIndex: cardIndex,\n          cardMoving: true,\n          cardList: updatedCardList\n        };\n      });\n    }\n  };\n  const handleCardDragEnd = () => {\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      lastSelectedCardIndex: prevGameData.selectedCardIndex,\n      selectedCardIndex: null,\n      cardMoving: false\n    }));\n  };\n  const handleCardMove = () => {};\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unselectable game-page background-grid\",\n    onMouseMove: handleMouseMove,\n    children: [gameData.jobList.length > -1 && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      elementRef: 'CardPile',\n      onDragStart: handleDragStart,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      onDragStart: handleDragStart,\n      onCancel: handleRestoreDiscardedCard,\n      discardedCardsList: gameData.discardedCardsList,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InfoPanel, {\n      position: infoPanelPosition,\n      onDragStart: handleDragStart,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      droppedCard: gameData.infoPanelCard,\n      onCardRestored: handleRestoreInfoPanelCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      categoryIndex: index,\n      text: category.text,\n      position: category.position,\n      categoryCardList: category.categoryCardList,\n      onDragStart: handleDragStart,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      onCardRestored: handleRestoreCategorizedCard\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => card.isActive && /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      zIndexOrder: card.zIndex,\n      onDragStart: () => handleDragStart(index),\n      onDragEnd: handleCardDragEnd,\n      onDragMove: handleCardMove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 21\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCategory,\n      style: {\n        position: 'absolute',\n        left: newCategoryButtonPosition.x + 'px',\n        top: newCategoryButtonPosition.y + 'px'\n      },\n      children: config.category.createButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"TSafOYFIJKgO4H7Js9Fo8VaQ9v8=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardPile","Category","CardDiscard","InfoPanel","config","jsxDEV","_jsxDEV","GamePage","jobListData","_s","gameData","setGameData","jobList","cardList","discardedCardsList","categoryList","infoPanelCard","selectedCardIndex","lastSelectedCardIndex","cardMoving","mouseCoordinates","setMouseCoordinates","x","y","zIndexOrder","setZIndexOrder","pilePosition","window","innerWidth","innerHeight","discardPosition","infoPanelPosition","newCategoryButtonPosition","newCategoryPosition","prevGameData","handleCardDropOnDroppable","item","droppedCard","console","log","text","isActive","updatedCategoryList","map","category","updatedcategoryCardList","categoryCardList","handleAddCard","length","randomIndex","Math","floor","random","selectedJob","cardWidth","newCard","position","description","zIndex","updatedJobList","filter","_","index","handleRestoreDiscardedCard","updatedDiscardedCardsList","handleRestoreCategorizedCard","categoryIndex","cardIndex","updatedCardList","selectedCategory","restoredCard","splice","push","handleRestoreInfoPanelCard","card","handleAddCategory","newCategory","baseTitle","handleDragStart","prevZIndexOrder","handleCardDragEnd","handleCardMove","handleMouseMove","e","mouseX","clientX","mouseY","clientY","className","onMouseMove","children","elementRef","onDragStart","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","mousePosition","onCardDropInsideDropZone","onCardRestored","onDragEnd","onDragMove","onClick","style","left","top","createButtonText","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './../components/Card';\nimport CardPile from './../components/CardPile';\nimport Category from './../components/Category';\nimport CardDiscard from './../components/CardDiscard';\nimport InfoPanel from './../components/InfoPanel';\nimport './../App.css';\n\nimport config from './../data/config';\n\nconst GamePage = ({ jobListData }) => {\n\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        discardedCardsList: [],\n        categoryList: [],\n        infoPanelCard: null,\n        selectedCardIndex: null,\n        lastSelectedCardIndex: null,\n        cardMoving: false,\n    });\n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n    const [zIndexOrder, setZIndexOrder] = useState(1);\n\n    const pilePosition = ({ x: window.innerWidth / 2 - 55, y: window.innerHeight / 2 - 40 });\n    const discardPosition = ({ x: 110, y: 80 });\n    const infoPanelPosition = ({ x: 110, y: window.innerHeight - 280 });\n    const newCategoryButtonPosition = ({ x: window.innerWidth / 2, y: 0 });\n    const newCategoryPosition = ({ x: window.innerWidth / 2, y: 30 });\n\n    useEffect(() => {\n        setGameData(prevGameData => ({\n            ...prevGameData,\n            jobList: jobListData || [],\n        }));\n    }, [jobListData]);\n\n    //useEffect(() => {\n    //    if (gameData.jobList.length <= 0) {\n    //        fetchJobList();\n    //    }\n    //}, []);\n\n    //const fetchJobList = () => {\n    //    const jobListString = JSON.stringify(jobListData);\n    //    const jobListObject = JSON.parse(jobListString);\n\n    //    setGameData((prevGameData) => ({\n    //        ...prevGameData,\n    //        jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n    //    }));\n    //};\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"InfoPanel\") {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                infoPanelCard: droppedCard,\n            }));\n        } else { // c'est une categorie\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n        }\n    }\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 80 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 80 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            description: discardedCardsList[discardedCardsList.length - 1].description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n        const updatedCategoryList = [...gameData.categoryList];\n        const updatedCardList = [...gameData.cardList];\n\n        const selectedCategory = updatedCategoryList[categoryIndex];\n        const restoredCard = selectedCategory.categoryCardList[cardIndex];\n\n        selectedCategory.categoryCardList.splice(cardIndex, 1);\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: position.x - cardWidth / 2, y: position.y - 80 },\n            text: restoredCard.text,\n            description: restoredCard.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: updatedCategoryList,\n            cardList: updatedCardList,\n        }));\n    }\n    const handleRestoreInfoPanelCard = (position, card) => {\n        const updatedCardList = [...gameData.cardList];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: position.x, y: position.y },\n            text: card.text,\n            description: card.description,\n            isActive: true,\n            zIndex: zIndexOrder,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: updatedCardList,\n            infoPanelCard: null,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: newCategoryPosition.x, y: newCategoryPosition.y },\n            text: config.category.baseTitle + (categoryList.length + 1),\n            categoryCardList: [],\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleDragStart = (cardIndex) => {\n        if (cardIndex != null) {\n            setZIndexOrder(prevZIndexOrder => prevZIndexOrder + 1);\n            setGameData((prevGameData) => {\n                const updatedCardList = [...prevGameData.cardList];\n                updatedCardList[cardIndex] = {\n                    ...updatedCardList[cardIndex],\n                    zIndex: zIndexOrder,\n                };\n\n                return {\n                    ...prevGameData,\n                    selectedCardIndex: cardIndex,\n                    cardMoving: true,\n                    cardList: updatedCardList,\n                };\n            });\n        }\n    };\n\n    const handleCardDragEnd = () => {\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            lastSelectedCardIndex: prevGameData.selectedCardIndex,\n            selectedCardIndex: null,\n            cardMoving: false,\n        }));\n    };\n    const handleCardMove = () => {\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n\n    return (\n        <div\n            className=\"unselectable game-page background-grid\"\n            onMouseMove={handleMouseMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n                    elementRef={'CardPile'}\n                    onDragStart={handleDragStart}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onDragStart={handleDragStart}\n\n                onCancel={handleRestoreDiscardedCard}\n                discardedCardsList={gameData.discardedCardsList}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n            />\n            <InfoPanel\n                position={infoPanelPosition}\n\n                onDragStart={handleDragStart}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n                droppedCard={gameData.infoPanelCard}\n\n                onCardRestored={handleRestoreInfoPanelCard}\n            />\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    categoryIndex={index}\n                    text={category.text}\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n\n                    onDragStart={handleDragStart}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n\n                    onCardRestored={handleRestoreCategorizedCard}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n                        zIndexOrder={card.zIndex}\n\n                        onDragStart={() => handleDragStart(index)}\n                        onDragEnd={handleCardDragEnd}\n                        onDragMove={handleCardMove}\n                    />)\n            ))}\n\n            <button\n                onClick={handleAddCategory}\n                style={{\n                    position: 'absolute',\n                    left: newCategoryButtonPosition.x + 'px',\n                    top: newCategoryButtonPosition.y + 'px',\n                }}\n            >\n                {config.category.createButtonText}\n            </button>\n        </div>\n    );\n};\n\nexport default GamePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}