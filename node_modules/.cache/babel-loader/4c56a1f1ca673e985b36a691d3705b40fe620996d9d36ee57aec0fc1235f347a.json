{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js\",\n  _s = $RefreshSig$();\n// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    selectedCardIndex: null,\n    categoryList: []\n  });\n  const isCardPileDisabled = gameData.jobList.length === 0;\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const pilePosition = {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  useEffect(() => {\n    if (gameData.jobList.length <= 0) {\n      fetchJobList();\n    }\n  }, []);\n  const fetchJobList = () => {\n    const jobListString = JSON.stringify(jobListData);\n    const jobListObject = JSON.parse(jobListString);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: Object.entries(jobListObject).map(([text, description]) => ({\n        text,\n        description\n      }))\n    }));\n    //console.log(\"fetchJobList\");\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 120\n      },\n      text: selectedJob.text,\n      description: selectedJob.description\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: 10,\n        y: 20\n      },\n      text: \"categorie \" + (categoryList.length + 1)\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleCardDragStart = index => {\n    //console.log(`Card picked! Card : ${gameData.cardList[index].text}`);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      selectedCardIndex: index\n    }));\n  };\n  const handleCardDrop = () => {\n    //console.log(`Card dropped! Card : ${gameData.cardList[gameData.selectedCardIndex].text}`);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      selectedCardIndex: null\n    }));\n  };\n  const handleCardMove = () => {\n    console.log(`Card moving! Card : ${gameData.cardList[gameData.selectedCardIndex].text}`);\n  };\n  const handleCardEnterDropZone = text => {\n    if (gameData.selectedCardIndex && text) {\n      console.log(`Card hoverring! Card : ${gameData.cardList[gameData.selectedCardIndex].text},  ${text}`);\n    }\n  };\n  const handleCardLeaveDropZone = text => {\n    if (gameData.selectedCardIndex && text) {\n      console.log(`Card outverring! Card : ${gameData.cardList[gameData.selectedCardIndex].text}, Zone : ${text}`);\n    }\n  };\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n    console.log(`mouseMoving ${gameData.mouseCoordinates}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: handleMouseMove\n    //onTouchMove={handleMouseMove}\n    ,\n    children: [!isCardPileDisabled && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      cardEnterDropZone: handleCardEnterDropZone,\n      cardLeaveDropZone: handleCardLeaveDropZone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCategory,\n      children: \"cr\\xE9er une cat\\xE9gorie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      text: category.text,\n      position: category.position,\n      cardEnterDropZone: handleCardEnterDropZone,\n      cardLeaveDropZone: handleCardLeaveDropZone\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      onDragStart: () => handleCardDragStart(index),\n      onDragEnd: handleCardDrop,\n      onDragMove: handleCardMove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"ON6DRQqrAEu1Ct7rNEZUQkb0H8w=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","jobListData","Card","CardPile","Category","CardDiscard","jsxDEV","_jsxDEV","GamePage","_s","gameData","setGameData","jobList","cardList","selectedCardIndex","categoryList","isCardPileDisabled","length","mouseCoordinates","setMouseCoordinates","x","y","pilePosition","window","innerWidth","innerHeight","discardPosition","fetchJobList","jobListString","JSON","stringify","jobListObject","parse","prevGameData","Object","entries","map","text","description","handleAddCard","randomIndex","Math","floor","random","selectedJob","cardWidth","newCard","position","updatedJobList","filter","_","index","handleAddCategory","newCategory","handleCardDragStart","handleCardDrop","handleCardMove","console","log","handleCardEnterDropZone","handleCardLeaveDropZone","handleMouseMove","e","mouseX","clientX","mouseY","clientY","onMouseMove","children","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","cardEnterDropZone","cardLeaveDropZone","onClick","category","card","onDragStart","onDragEnd","onDragMove","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js"],"sourcesContent":["// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\n\nconst GamePage = () => {\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        selectedCardIndex: null,\n        categoryList: [],\n    });\n    const isCardPileDisabled = gameData.jobList.length === 0;\n    const [mouseCoordinates, setMouseCoordinates] = useState({\n        x: 0, y: 0 });\n\n    const pilePosition = ({ x: window.innerWidth / 2, y: window.innerHeight / 2 });\n    const discardPosition = ({ x: 110, y: 80 });\n\n    useEffect(() => {\n        if (gameData.jobList.length <= 0) {\n            fetchJobList();\n        }\n    }, []);\n\n    const fetchJobList = () => {\n        const jobListString = JSON.stringify(jobListData);\n        const jobListObject = JSON.parse(jobListString);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n        }));\n        //console.log(\"fetchJobList\");\n    };\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 120 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: 10, y: 20 },\n            text: \"categorie \" + (categoryList.length + 1),\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleCardDragStart = (index) => {\n        //console.log(`Card picked! Card : ${gameData.cardList[index].text}`);\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            selectedCardIndex: index,\n        }));\n    };\n\n    const handleCardDrop = () => {\n        //console.log(`Card dropped! Card : ${gameData.cardList[gameData.selectedCardIndex].text}`);\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            selectedCardIndex: null,\n        }));\n    };\n    const handleCardMove = () => {\n        console.log(`Card moving! Card : ${gameData.cardList[gameData.selectedCardIndex].text}`);\n    };\n\n    const handleCardEnterDropZone = (text) => {\n        if (gameData.selectedCardIndex && text) {\n            console.log(`Card hoverring! Card : ${gameData.cardList[gameData.selectedCardIndex].text},  ${text}`);\n        }\n    }\n\n    const handleCardLeaveDropZone = (text) => {\n        if (gameData.selectedCardIndex && text) {\n            console.log(`Card outverring! Card : ${gameData.cardList[gameData.selectedCardIndex].text}, Zone : ${text}`);\n        }\n    }\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n        console.log(`mouseMoving ${gameData.mouseCoordinates}`);\n    };\n\n    return (\n        <div\n            onMouseMove={handleMouseMove}\n            //onTouchMove={handleMouseMove}\n        >\n            {!isCardPileDisabled && (\n                <CardPile\n                    position={pilePosition}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                cardEnterDropZone={handleCardEnterDropZone}\n                cardLeaveDropZone={handleCardLeaveDropZone}\n            />\n            <button onClick={handleAddCategory}>créer une catégorie</button>\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    text={category.text}\n                    position={category.position}\n\n                    cardEnterDropZone={handleCardEnterDropZone}\n                    cardLeaveDropZone={handleCardLeaveDropZone}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                <Card\n                    key={index}\n                    text={card.text}\n                    position={card.position}\n\n                    onDragStart={() => handleCardDragStart(index)}\n                    onDragEnd={handleCardDrop}\n                    onDragMove={handleCardMove}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default GamePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}