{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js\",\n  _s = $RefreshSig$();\n// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport CardStack from './CardStack';\nimport jobListData from './../data/jobList.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: []\n  });\n  useEffect(() => {\n    fetchJobList();\n  }, []);\n  const fetchJobList = () => {\n    const jobListString = JSON.stringify(jobListData);\n    const jobListObject = JSON.parse(jobListString);\n    console.log(jobListData);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: Object.entries(jobListObject).map(([text, description]) => ({\n        text,\n        description\n      }))\n    }));\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList,\n      cardList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const newCard = {\n      text: selectedJob.text,\n      description: selectedJob.description\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CardStack, {\n      addCard: handleAddCard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), gameData.cardList.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"xhgjdDU5/ZSUpdCkz+6Vkbbbjxw=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","Card","CardStack","jobListData","jsxDEV","_jsxDEV","GamePage","_s","gameData","setGameData","jobList","cardList","fetchJobList","jobListString","JSON","stringify","jobListObject","parse","console","log","prevGameData","Object","entries","map","text","description","handleAddCard","pilePosition","length","randomIndex","Math","floor","random","selectedJob","newCard","updatedJobList","filter","_","index","children","addCard","fileName","_jsxFileName","lineNumber","columnNumber","card","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js"],"sourcesContent":["// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport CardStack from './CardStack';\nimport jobListData from './../data/jobList.json';\n\nconst GamePage = () => {\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n    });\n\n    useEffect(() => {\n        fetchJobList();\n    }, []);\n\n    const fetchJobList = () => {\n        const jobListString = JSON.stringify(jobListData);\n        const jobListObject = JSON.parse(jobListString);\n        console.log(jobListData);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n        }));\n    };\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList, cardList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const newCard = {\n            text: selectedJob.text,\n            description: selectedJob.description,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    return (\n        <div>\n            <CardStack addCard={handleAddCard} />\n            {gameData.cardList.map((card, index) => (\n                <Card key={index} text={card.text} />\n            ))}\n        </div>\n    );\n};\n\nexport default GamePage;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,WAAW,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC;IACrCW,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACd,CAAC,CAAC;EAEFX,SAAS,CAAC,MAAM;IACZY,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,aAAa,GAAGC,IAAI,CAACC,SAAS,CAACZ,WAAW,CAAC;IACjD,MAAMa,aAAa,GAAGF,IAAI,CAACG,KAAK,CAACJ,aAAa,CAAC;IAC/CK,OAAO,CAACC,GAAG,CAAChB,WAAW,CAAC;IAExBM,WAAW,CAAEW,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfV,OAAO,EAAEW,MAAM,CAACC,OAAO,CAACN,aAAa,CAAC,CAACO,GAAG,CAAC,CAAC,CAACC,IAAI,EAAEC,WAAW,CAAC,MAAM;QAAED,IAAI;QAAEC;MAAY,CAAC,CAAC;IAC/F,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAMC,aAAa,GAAIC,YAAY,IAAK;IACpC,MAAM;MAAEjB,OAAO;MAAEC;IAAS,CAAC,GAAGH,QAAQ;IAEtC,IAAIE,OAAO,CAACkB,MAAM,KAAK,CAAC,EAAE;IAE1B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGtB,OAAO,CAACkB,MAAM,CAAC;IAC9D,MAAMK,WAAW,GAAGvB,OAAO,CAACmB,WAAW,CAAC;IAExC,MAAMK,OAAO,GAAG;MACZV,IAAI,EAAES,WAAW,CAACT,IAAI;MACtBC,WAAW,EAAEQ,WAAW,CAACR;IAC7B,CAAC;IAED,MAAMU,cAAc,GAAGzB,OAAO,CAAC0B,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKT,WAAW,CAAC;IAE1EpB,WAAW,CAAEW,YAAY,KAAM;MAC3B,GAAGA,YAAY;MACfT,QAAQ,EAAE,CAAC,GAAGA,QAAQ,EAAEuB,OAAO,CAAC;MAChCxB,OAAO,EAAEyB;IACb,CAAC,CAAC,CAAC;EACP,CAAC;EAED,oBACI9B,OAAA;IAAAkC,QAAA,gBACIlC,OAAA,CAACH,SAAS;MAACsC,OAAO,EAAEd;IAAc;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACpCpC,QAAQ,CAACG,QAAQ,CAACY,GAAG,CAAC,CAACsB,IAAI,EAAEP,KAAK,kBAC/BjC,OAAA,CAACJ,IAAI;MAAauB,IAAI,EAAEqB,IAAI,CAACrB;IAAK,GAAvBc,KAAK;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAoB,CACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACrC,EAAA,CAnDID,QAAQ;AAAAwC,EAAA,GAARxC,QAAQ;AAqDd,eAAeA,QAAQ;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}