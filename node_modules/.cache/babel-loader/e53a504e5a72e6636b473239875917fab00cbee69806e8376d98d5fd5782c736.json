{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js\",\n  _s = $RefreshSig$();\n// GamePage.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport './../App.css';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    discardedCardsList: [],\n    selectedCardIndex: null,\n    lastSelectedCardIndex: null,\n    categoryList: [],\n    cardMoving: false\n  });\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const [zIndexOrder, setZIndexOrder] = useState(1);\n  const pilePosition = {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  useEffect(() => {\n    if (gameData.jobList.length <= 0) {\n      fetchJobList();\n    }\n  }, []);\n  const fetchJobList = () => {\n    const jobListString = JSON.stringify(jobListData);\n    const jobListObject = JSON.parse(jobListString);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: Object.entries(jobListObject).map(([text, description]) => ({\n        text,\n        description\n      }))\n    }));\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 120\n      },\n      text: selectedJob.text,\n      description: selectedJob.description,\n      isActive: true\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleRestoreDiscardedCard = discardPosition => {\n    const {\n      discardedCardsList\n    } = gameData;\n    if (discardedCardsList.length === 0) return;\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: discardPosition.x - cardWidth / 2,\n        y: discardPosition.y - 120\n      },\n      text: discardedCardsList[discardedCardsList.length - 1].text,\n      isActive: true\n    };\n    const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      discardedCardsList: updatedDiscardedCardsList\n    }));\n  };\n  const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n    const updatedCategoryList = [...gameData.categoryList];\n    const updatedCardList = [...gameData.cardList];\n    const selectedCategory = updatedCategoryList[categoryIndex];\n    const restoredCard = selectedCategory.categoryCardList[cardIndex];\n    selectedCategory.categoryCardList.splice(cardIndex, 1);\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: position.x - cardWidth / 2,\n        y: position.y - 120\n      },\n      text: restoredCard.text,\n      isActive: true\n    };\n    updatedCardList.push(newCard);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: updatedCategoryList,\n      cardList: updatedCardList\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: 10,\n        y: 20\n      },\n      text: \"categorie \" + (categoryList.length + 1),\n      categoryCardList: []\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleCardDropOnDroppable = item => {\n    const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n    //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n    droppedCard.isActive = false;\n    if (item === \"Discard\") {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        discardedCardsList: [...prevGameData.discardedCardsList, droppedCard]\n      }));\n    } else if (item === \"Info Panel\") {} else {\n      // if category\n      const updatedCategoryList = gameData.categoryList.map(category => {\n        if (category.text === item) {\n          const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n          return {\n            ...category,\n            categoryCardList: updatedcategoryCardList\n          };\n        }\n        return category;\n      });\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        categoryList: updatedCategoryList\n      }));\n    }\n  };\n  const handleDragStart = cardIndex => {\n    //set zIndexOrder of element\n    setZIndexOrder(+1);\n    console.log(zIndexOrder);\n    if (cardIndex != null) {\n      setGameData(prevGameData => ({\n        ...prevGameData,\n        selectedCardIndex: cardIndex,\n        cardMoving: true\n      }));\n    }\n  };\n  const handleCardDragEnd = () => {\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      lastSelectedCardIndex: prevGameData.selectedCardIndex,\n      selectedCardIndex: null,\n      cardMoving: false\n    }));\n  };\n  const handleCardMove = () => {};\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unselectable\",\n    onMouseMove: handleMouseMove,\n    children: [gameData.jobList.length > -1 && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      elementRef: 'CardPile',\n      onDragStart: handleDragStart,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      onDragStart: handleDragStart,\n      onCancel: handleRestoreDiscardedCard,\n      discardedCardsList: gameData.discardedCardsList,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCategory,\n      children: \"cr\\xE9er une cat\\xE9gorie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      categoryIndex: index,\n      text: category.text,\n      position: category.position,\n      categoryCardList: category.categoryCardList,\n      onDragStart: handleDragStart,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDropOnDroppable,\n      onCardRestored: handleRestoreCategorizedCard\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => card.isActive && /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      onDragStart: () => handleDragStart(index),\n      onDragEnd: handleCardDragEnd,\n      onDragMove: handleCardMove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"CtQCv/ItwyStY14r2ZiP4If8Hlw=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jobListData","Card","CardPile","Category","CardDiscard","jsxDEV","_jsxDEV","GamePage","_s","gameData","setGameData","jobList","cardList","discardedCardsList","selectedCardIndex","lastSelectedCardIndex","categoryList","cardMoving","mouseCoordinates","setMouseCoordinates","x","y","zIndexOrder","setZIndexOrder","pilePosition","window","innerWidth","innerHeight","discardPosition","length","fetchJobList","jobListString","JSON","stringify","jobListObject","parse","prevGameData","Object","entries","map","text","description","handleAddCard","randomIndex","Math","floor","random","selectedJob","cardWidth","newCard","position","isActive","updatedJobList","filter","_","index","handleRestoreDiscardedCard","updatedDiscardedCardsList","handleRestoreCategorizedCard","categoryIndex","cardIndex","updatedCategoryList","updatedCardList","selectedCategory","restoredCard","categoryCardList","splice","push","handleAddCategory","newCategory","handleCardDropOnDroppable","item","droppedCard","category","updatedcategoryCardList","handleDragStart","console","log","handleCardDragEnd","handleCardMove","handleMouseMove","e","mouseX","clientX","mouseY","clientY","className","onMouseMove","children","elementRef","onDragStart","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","onCancel","mousePosition","onCardDropInsideDropZone","onClick","onCardRestored","card","onDragEnd","onDragMove","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js"],"sourcesContent":["// GamePage.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport './../App.css';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\n\nconst GamePage = () => {\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        discardedCardsList: [],\n        selectedCardIndex: null,\n        lastSelectedCardIndex: null,\n        categoryList: [],\n        cardMoving: false,\n    });\n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n    const [zIndexOrder, setZIndexOrder] = useState(1);\n\n    const pilePosition = ({ x: window.innerWidth / 2, y: window.innerHeight / 2 });\n    const discardPosition = ({ x: 110, y: 80 });\n\n    useEffect(() => {\n        if (gameData.jobList.length <= 0) {\n            fetchJobList();\n        }\n    }, []);\n\n    const fetchJobList = () => {\n        const jobListString = JSON.stringify(jobListData);\n        const jobListObject = JSON.parse(jobListString);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n        }));\n    };\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 120 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleRestoreDiscardedCard = (discardPosition) => {\n        const { discardedCardsList } = gameData;\n\n        if (discardedCardsList.length === 0) return;\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: discardPosition.x - cardWidth / 2, y: discardPosition.y - 120 },\n            text: discardedCardsList[discardedCardsList.length - 1].text,\n            isActive: true,\n        };\n        const updatedDiscardedCardsList = discardedCardsList.filter((_, index) => index !== discardedCardsList.length - 1);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            discardedCardsList: updatedDiscardedCardsList,\n        }));\n    }\n\n    const handleRestoreCategorizedCard = (position, categoryIndex, cardIndex) => {\n        const updatedCategoryList = [...gameData.categoryList];\n        const updatedCardList = [...gameData.cardList];\n\n        const selectedCategory = updatedCategoryList[categoryIndex];\n        const restoredCard = selectedCategory.categoryCardList[cardIndex];\n\n        selectedCategory.categoryCardList.splice(cardIndex, 1);\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: position.x - cardWidth / 2, y: position.y - 120 },\n            text: restoredCard.text,\n            isActive: true,\n        };\n\n        updatedCardList.push(newCard);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: updatedCategoryList,\n            cardList: updatedCardList,\n        }));\n    }\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: 10, y: 20 },\n            text: \"categorie \" + (categoryList.length + 1),\n            categoryCardList: [],\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleCardDropOnDroppable = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        //console.log(`Card ${droppedCard.text} dropped inside : ${item} `);\n\n        droppedCard.isActive = false;\n        if (item === \"Discard\") {\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                discardedCardsList: [...prevGameData.discardedCardsList, droppedCard],\n            }));\n        } else if (item === \"Info Panel\") {\n        } else { // if category\n            const updatedCategoryList = gameData.categoryList.map((category) => {\n                if (category.text === item) {\n                    const updatedcategoryCardList = category.categoryCardList ? [...category.categoryCardList, droppedCard] : [droppedCard];\n\n                    return {\n                        ...category,\n                        categoryCardList: updatedcategoryCardList,\n                    };\n                }\n                return category;\n            });\n\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                categoryList: updatedCategoryList,\n            }));\n        }\n    }\n\n    const handleDragStart = (cardIndex) => {\n        //set zIndexOrder of element\n        setZIndexOrder(+1);\n        console.log(zIndexOrder);\n        if (cardIndex != null) {\n            setGameData((prevGameData) => ({\n                ...prevGameData,\n                selectedCardIndex: cardIndex,\n                cardMoving: true,\n            }));\n        }\n    };\n\n    const handleCardDragEnd = () => {\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            lastSelectedCardIndex: prevGameData.selectedCardIndex,\n            selectedCardIndex: null,\n            cardMoving: false,\n        }));\n    };\n    const handleCardMove = () => {\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n\n    return (\n        <div\n            className=\"unselectable\"\n            onMouseMove={handleMouseMove}\n        >\n            {gameData.jobList.length > -1 && (\n                <CardPile\n                    position={pilePosition}\n                    elementRef={'CardPile'}\n                    onDragStart={handleDragStart}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                onDragStart={handleDragStart}\n\n                onCancel={handleRestoreDiscardedCard}\n                discardedCardsList={gameData.discardedCardsList}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n\n                onCardDropInsideDropZone={handleCardDropOnDroppable}\n            />\n            <button onClick={handleAddCategory}>créer une catégorie</button>\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    categoryIndex={index}\n                    text={category.text}\n                    position={category.position}\n                    categoryCardList={category.categoryCardList}\n\n                    onDragStart={handleDragStart}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDropOnDroppable}\n\n                    onCardRestored={handleRestoreCategorizedCard}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                    <Card\n                        key={index}\n                        text={card.text}\n                        position={card.position}\n\n                        onDragStart={() => handleDragStart(index)}\n                        onDragEnd={handleCardDragEnd}\n                        onDragMove={handleCardMove}\n                    />)\n            ))}\n        </div>\n    );\n};\n\nexport default GamePage;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}