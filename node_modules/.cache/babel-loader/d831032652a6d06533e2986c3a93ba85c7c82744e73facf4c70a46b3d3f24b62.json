{"ast":null,"code":"var _jsxFileName = \"/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js\",\n  _s = $RefreshSig$();\n// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const [gameData, setGameData] = useState({\n    jobList: [],\n    cardList: [],\n    discardedCardsList: [],\n    selectedCardIndex: null,\n    lastSelectedCardIndex: null,\n    categoryList: [],\n    cardMoving: false\n  });\n  const isCardPileDisabled = gameData.jobList.length === 0;\n  const [mouseCoordinates, setMouseCoordinates] = useState({\n    x: 0,\n    y: 0\n  });\n  const pilePosition = {\n    x: window.innerWidth / 2,\n    y: window.innerHeight / 2\n  };\n  const discardPosition = {\n    x: 110,\n    y: 80\n  };\n  useEffect(() => {\n    if (gameData.jobList.length <= 0) {\n      fetchJobList();\n    }\n  }, []);\n  const fetchJobList = () => {\n    const jobListString = JSON.stringify(jobListData);\n    const jobListObject = JSON.parse(jobListString);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      jobList: Object.entries(jobListObject).map(([text, description]) => ({\n        text,\n        description\n      }))\n    }));\n  };\n  const handleAddCard = pilePosition => {\n    const {\n      jobList\n    } = gameData;\n    if (jobList.length === 0) return;\n    const randomIndex = Math.floor(Math.random() * jobList.length);\n    const selectedJob = jobList[randomIndex];\n    const cardWidth = 100;\n    const newCard = {\n      position: {\n        x: pilePosition.x - cardWidth / 2,\n        y: pilePosition.y - 120\n      },\n      text: selectedJob.text,\n      description: selectedJob.description,\n      isActive: true\n    };\n    const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      cardList: [...prevGameData.cardList, newCard],\n      jobList: updatedJobList\n    }));\n  };\n  const handleAddCategory = () => {\n    const {\n      categoryList\n    } = gameData;\n    const newCategory = {\n      position: {\n        x: 10,\n        y: 20\n      },\n      text: \"categorie \" + (categoryList.length + 1)\n    };\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      categoryList: [...prevGameData.categoryList, newCategory]\n    }));\n  };\n  const handleCardDragStart = index => {\n    console.log(`Card picked! Card : ${gameData.cardList[index].text}`);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      selectedCardIndex: index,\n      cardMoving: true\n    }));\n  };\n  const handleCardDrop = item => {\n    const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n    console.log(`Card ${gameData.cardList[gameData.lastSelectedCardIndex].text} dropped inside : ${item} `);\n    if (item === \"Discard\") {\n      const updatedCards = cards.map((card, index) => {\n        if (index === selectedCardIndex) {\n          return {\n            ...card,\n            isActive: false\n          };\n        }\n        return card;\n      });\n      this.setGameData({\n        cards: updatedCards,\n        discardedCardsList: [...discardedCardsList, droppedCard]\n      });\n    }\n  };\n  const handleCardDragEnd = () => {\n    console.log(`Card leaved! Card : ${gameData.cardList[gameData.selectedCardIndex].text}`);\n    setGameData(prevGameData => ({\n      ...prevGameData,\n      lastSelectedCardIndex: prevGameData.selectedCardIndex,\n      selectedCardIndex: null,\n      cardMoving: false\n    }));\n  };\n  const handleCardMove = () => {};\n  const handleMouseMove = e => {\n    const mouseX = e.clientX;\n    const mouseY = e.clientY;\n    setMouseCoordinates({\n      x: mouseX,\n      y: mouseY\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unselectable\",\n    onMouseMove: handleMouseMove\n    //onTouchMove={handleMouseMove}\n    ,\n    children: [!isCardPileDisabled && /*#__PURE__*/_jsxDEV(CardPile, {\n      position: pilePosition,\n      addCard: handleAddCard,\n      counter: gameData.jobList.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CardDiscard, {\n      position: discardPosition,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDrop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddCategory,\n      children: \"cr\\xE9er une cat\\xE9gorie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), gameData.categoryList.map((category, index) => /*#__PURE__*/_jsxDEV(Category, {\n      text: category.text,\n      position: category.position,\n      cardMoving: gameData.cardMoving,\n      mousePosition: mouseCoordinates,\n      onCardDropInsideDropZone: handleCardDrop\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }, this)), gameData.cardList.map((card, index) => card.isActive && /*#__PURE__*/_jsxDEV(Card, {\n      text: card.text,\n      position: card.position,\n      onDragStart: () => handleCardDragStart(index),\n      onDragEnd: handleCardDragEnd,\n      onDragMove: handleCardMove\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(GamePage, \"08Ze4w/vcMaNg49/IK5nwy3EXCk=\");\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","jobListData","Card","CardPile","Category","CardDiscard","jsxDEV","_jsxDEV","GamePage","_s","gameData","setGameData","jobList","cardList","discardedCardsList","selectedCardIndex","lastSelectedCardIndex","categoryList","cardMoving","isCardPileDisabled","length","mouseCoordinates","setMouseCoordinates","x","y","pilePosition","window","innerWidth","innerHeight","discardPosition","fetchJobList","jobListString","JSON","stringify","jobListObject","parse","prevGameData","Object","entries","map","text","description","handleAddCard","randomIndex","Math","floor","random","selectedJob","cardWidth","newCard","position","isActive","updatedJobList","filter","_","index","handleAddCategory","newCategory","handleCardDragStart","console","log","handleCardDrop","item","droppedCard","updatedCards","cards","card","handleCardDragEnd","handleCardMove","handleMouseMove","e","mouseX","clientX","mouseY","clientY","className","onMouseMove","children","addCard","counter","fileName","_jsxFileName","lineNumber","columnNumber","mousePosition","onCardDropInsideDropZone","onClick","category","onDragStart","onDragEnd","onDragMove","_c","$RefreshReg$"],"sources":["/Users/todmopel/TheHangar/jeu-de-tri-de-cartes/src/components/GamePage.js"],"sourcesContent":["// GamePage.js\nimport React, { useState, useEffect } from 'react';\nimport './../App.css';\nimport jobListData from './../data/jobList.json';\nimport Card from './Card';\nimport CardPile from './CardPile';\nimport Category from './Category';\nimport CardDiscard from './CardDiscard';\n\nconst GamePage = () => {\n    const [gameData, setGameData] = useState({\n        jobList: [],\n        cardList: [],\n        discardedCardsList: [],\n        selectedCardIndex: null,\n        lastSelectedCardIndex: null,\n        categoryList: [],\n        cardMoving: false,\n    });\n    const isCardPileDisabled = gameData.jobList.length === 0;\n    const [mouseCoordinates, setMouseCoordinates] = useState({ x: 0, y: 0 });\n\n    const pilePosition = ({ x: window.innerWidth / 2, y: window.innerHeight / 2 });\n    const discardPosition = ({ x: 110, y: 80 });\n\n    useEffect(() => {\n        if (gameData.jobList.length <= 0) {\n            fetchJobList();\n        }\n    }, []);\n\n    const fetchJobList = () => {\n        const jobListString = JSON.stringify(jobListData);\n        const jobListObject = JSON.parse(jobListString);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            jobList: Object.entries(jobListObject).map(([text, description]) => ({ text, description })),\n        }));\n    };\n\n    const handleAddCard = (pilePosition) => {\n        const { jobList } = gameData;\n\n        if (jobList.length === 0) return;\n\n        const randomIndex = Math.floor(Math.random() * jobList.length);\n        const selectedJob = jobList[randomIndex];\n\n        const cardWidth = 100;\n        const newCard = {\n            position: { x: pilePosition.x - cardWidth / 2, y: pilePosition.y - 120 },\n            text: selectedJob.text,\n            description: selectedJob.description,\n            isActive: true,\n        };\n\n        const updatedJobList = jobList.filter((_, index) => index !== randomIndex);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            cardList: [...prevGameData.cardList, newCard],\n            jobList: updatedJobList,\n        }));\n    };\n\n    const handleAddCategory = () => {\n        const { categoryList } = gameData;\n\n        const newCategory = {\n            position: { x: 10, y: 20 },\n            text: \"categorie \" + (categoryList.length + 1),\n        }\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            categoryList: [...prevGameData.categoryList, newCategory],\n        }));\n    }\n\n    const handleCardDragStart = (index) => {\n        console.log(`Card picked! Card : ${gameData.cardList[index].text}`);\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            selectedCardIndex: index,\n            cardMoving : true,\n        }));\n    };\n\n    const handleCardDrop = (item) => {\n        const droppedCard = gameData.cardList[gameData.lastSelectedCardIndex];\n\n        console.log(`Card ${gameData.cardList[gameData.lastSelectedCardIndex].text} dropped inside : ${item} `);\n\n        if (item === \"Discard\") {\n            const updatedCards = cards.map((card, index) => {\n                if (index === selectedCardIndex) {\n                    return { ...card, isActive: false };\n                }\n                return card;\n            });\n\n            this.setGameData({\n                cards: updatedCards,\n                discardedCardsList: [...discardedCardsList, droppedCard],\n            });\n        }\n    }\n\n    const handleCardDragEnd = () => {\n        console.log(`Card leaved! Card : ${gameData.cardList[gameData.selectedCardIndex].text}`);\n\n        setGameData((prevGameData) => ({\n            ...prevGameData,\n            lastSelectedCardIndex: prevGameData.selectedCardIndex,\n            selectedCardIndex: null,\n            cardMoving: false,\n        }));\n    };\n    const handleCardMove = () => {\n    };\n\n    const handleMouseMove = (e) => {\n        const mouseX = e.clientX;\n        const mouseY = e.clientY;\n\n        setMouseCoordinates({ x: mouseX, y: mouseY });\n    };\n\n    return (\n        <div\n            className=\"unselectable\"\n            onMouseMove={handleMouseMove}\n            //onTouchMove={handleMouseMove}\n        >\n            {!isCardPileDisabled && (\n                <CardPile\n                    position={pilePosition}\n\n                    addCard={handleAddCard}\n                    counter={gameData.jobList.length}\n                />\n            )}\n            <CardDiscard\n                position={discardPosition}\n\n                cardMoving={gameData.cardMoving}\n                mousePosition={mouseCoordinates}\n                onCardDropInsideDropZone={handleCardDrop}\n            />\n            <button onClick={handleAddCategory}>créer une catégorie</button>\n            {gameData.categoryList.map((category, index) => (\n                <Category\n                    key={index}\n                    text={category.text}\n                    position={category.position}\n\n                    cardMoving={gameData.cardMoving}\n                    mousePosition={mouseCoordinates}\n\n                    onCardDropInsideDropZone={handleCardDrop}\n                />\n            ))}\n            {gameData.cardList.map((card, index) => (\n                card.isActive && (\n                <Card\n                    key={index}\n                    text={card.text}\n                    position={card.position}\n\n                    onDragStart={() => handleCardDragStart(index)}\n                    onDragEnd={handleCardDragEnd}\n                    onDragMove={handleCardMove}\n                />)\n            ))}\n        </div>\n    );\n};\n\nexport default GamePage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}